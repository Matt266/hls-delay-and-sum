-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DelayAndSum is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_real_TVALID : IN STD_LOGIC;
    in1_imag_TVALID : IN STD_LOGIC;
    in2_real_TVALID : IN STD_LOGIC;
    in2_imag_TVALID : IN STD_LOGIC;
    in3_real_TVALID : IN STD_LOGIC;
    in3_imag_TVALID : IN STD_LOGIC;
    in4_real_TVALID : IN STD_LOGIC;
    in4_imag_TVALID : IN STD_LOGIC;
    out_real_TREADY : IN STD_LOGIC;
    out_imag_TREADY : IN STD_LOGIC;
    in1_real_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in1_real_TREADY : OUT STD_LOGIC;
    in1_imag_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in1_imag_TREADY : OUT STD_LOGIC;
    in2_real_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in2_real_TREADY : OUT STD_LOGIC;
    in2_imag_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in2_imag_TREADY : OUT STD_LOGIC;
    in3_real_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in3_real_TREADY : OUT STD_LOGIC;
    in3_imag_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in3_imag_TREADY : OUT STD_LOGIC;
    in4_real_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in4_real_TREADY : OUT STD_LOGIC;
    in4_imag_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in4_imag_TREADY : OUT STD_LOGIC;
    out_real_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_real_TVALID : OUT STD_LOGIC;
    out_imag_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_imag_TVALID : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of DelayAndSum is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DelayAndSum_DelayAndSum,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.254000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=176,HLS_SYN_LUT=532,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state1_io : BOOLEAN;
    signal regslice_both_out_real_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_imag_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal phi : STD_LOGIC_VECTOR (11 downto 0);
    signal fc : STD_LOGIC_VECTOR (31 downto 0);
    signal xpos1 : STD_LOGIC_VECTOR (15 downto 0);
    signal xpos2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xpos3 : STD_LOGIC_VECTOR (15 downto 0);
    signal xpos4 : STD_LOGIC_VECTOR (15 downto 0);
    signal in1_real_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in1_imag_TDATA_blk_n : STD_LOGIC;
    signal in2_real_TDATA_blk_n : STD_LOGIC;
    signal in2_imag_TDATA_blk_n : STD_LOGIC;
    signal in3_real_TDATA_blk_n : STD_LOGIC;
    signal in3_imag_TDATA_blk_n : STD_LOGIC;
    signal in4_real_TDATA_blk_n : STD_LOGIC;
    signal in4_imag_TDATA_blk_n : STD_LOGIC;
    signal out_real_TDATA_blk_n : STD_LOGIC;
    signal out_imag_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal in1_real_buffer_cast_fu_150_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln91_fu_158_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln91_fu_162_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln91_1_fu_168_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal in2_real_buffer_cast_fu_154_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln91_1_fu_172_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln1_fu_186_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln92_fu_194_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln_fu_178_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln92_fu_198_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal in1_imag_buffer_cast_fu_215_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln96_fu_223_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln96_fu_227_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln96_1_fu_233_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal in2_imag_buffer_cast_fu_219_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln96_1_fu_237_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal shl_ln3_fu_251_p3 : STD_LOGIC_VECTOR (28 downto 0);
    signal sext_ln97_fu_259_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal shl_ln2_fu_243_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal add_ln97_fu_263_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in1_real_U_apdone_blk : STD_LOGIC;
    signal in1_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in1_real_TVALID_int_regslice : STD_LOGIC;
    signal in1_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in1_real_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_imag_U_apdone_blk : STD_LOGIC;
    signal in1_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in1_imag_TVALID_int_regslice : STD_LOGIC;
    signal in1_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in1_imag_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_real_U_apdone_blk : STD_LOGIC;
    signal in2_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in2_real_TVALID_int_regslice : STD_LOGIC;
    signal in2_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in2_real_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_imag_U_apdone_blk : STD_LOGIC;
    signal in2_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in2_imag_TVALID_int_regslice : STD_LOGIC;
    signal in2_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in2_imag_U_ack_in : STD_LOGIC;
    signal regslice_both_in3_real_U_apdone_blk : STD_LOGIC;
    signal in3_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_real_TVALID_int_regslice : STD_LOGIC;
    signal in3_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in3_real_U_ack_in : STD_LOGIC;
    signal regslice_both_in3_imag_U_apdone_blk : STD_LOGIC;
    signal in3_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_imag_TVALID_int_regslice : STD_LOGIC;
    signal in3_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in3_imag_U_ack_in : STD_LOGIC;
    signal regslice_both_in4_real_U_apdone_blk : STD_LOGIC;
    signal in4_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_real_TVALID_int_regslice : STD_LOGIC;
    signal in4_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in4_real_U_ack_in : STD_LOGIC;
    signal regslice_both_in4_imag_U_apdone_blk : STD_LOGIC;
    signal in4_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_imag_TVALID_int_regslice : STD_LOGIC;
    signal in4_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in4_imag_U_ack_in : STD_LOGIC;
    signal out_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal out_real_TVALID_int_regslice : STD_LOGIC;
    signal out_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_real_U_vld_out : STD_LOGIC;
    signal out_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal out_imag_TVALID_int_regslice : STD_LOGIC;
    signal out_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_imag_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component DelayAndSum_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        phi : OUT STD_LOGIC_VECTOR (11 downto 0);
        fc : OUT STD_LOGIC_VECTOR (31 downto 0);
        xpos1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        xpos2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        xpos3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        xpos4 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DelayAndSum_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component DelayAndSum_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        phi => phi,
        fc => fc,
        xpos1 => xpos1,
        xpos2 => xpos2,
        xpos3 => xpos3,
        xpos4 => xpos4);

    regslice_both_in1_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_real_TDATA,
        vld_in => in1_real_TVALID,
        ack_in => regslice_both_in1_real_U_ack_in,
        data_out => in1_real_TDATA_int_regslice,
        vld_out => in1_real_TVALID_int_regslice,
        ack_out => in1_real_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_real_U_apdone_blk);

    regslice_both_in1_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_imag_TDATA,
        vld_in => in1_imag_TVALID,
        ack_in => regslice_both_in1_imag_U_ack_in,
        data_out => in1_imag_TDATA_int_regslice,
        vld_out => in1_imag_TVALID_int_regslice,
        ack_out => in1_imag_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_imag_U_apdone_blk);

    regslice_both_in2_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_real_TDATA,
        vld_in => in2_real_TVALID,
        ack_in => regslice_both_in2_real_U_ack_in,
        data_out => in2_real_TDATA_int_regslice,
        vld_out => in2_real_TVALID_int_regslice,
        ack_out => in2_real_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_real_U_apdone_blk);

    regslice_both_in2_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_imag_TDATA,
        vld_in => in2_imag_TVALID,
        ack_in => regslice_both_in2_imag_U_ack_in,
        data_out => in2_imag_TDATA_int_regslice,
        vld_out => in2_imag_TVALID_int_regslice,
        ack_out => in2_imag_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_imag_U_apdone_blk);

    regslice_both_in3_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in3_real_TDATA,
        vld_in => in3_real_TVALID,
        ack_in => regslice_both_in3_real_U_ack_in,
        data_out => in3_real_TDATA_int_regslice,
        vld_out => in3_real_TVALID_int_regslice,
        ack_out => in3_real_TREADY_int_regslice,
        apdone_blk => regslice_both_in3_real_U_apdone_blk);

    regslice_both_in3_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in3_imag_TDATA,
        vld_in => in3_imag_TVALID,
        ack_in => regslice_both_in3_imag_U_ack_in,
        data_out => in3_imag_TDATA_int_regslice,
        vld_out => in3_imag_TVALID_int_regslice,
        ack_out => in3_imag_TREADY_int_regslice,
        apdone_blk => regslice_both_in3_imag_U_apdone_blk);

    regslice_both_in4_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in4_real_TDATA,
        vld_in => in4_real_TVALID,
        ack_in => regslice_both_in4_real_U_ack_in,
        data_out => in4_real_TDATA_int_regslice,
        vld_out => in4_real_TVALID_int_regslice,
        ack_out => in4_real_TREADY_int_regslice,
        apdone_blk => regslice_both_in4_real_U_apdone_blk);

    regslice_both_in4_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in4_imag_TDATA,
        vld_in => in4_imag_TVALID,
        ack_in => regslice_both_in4_imag_U_ack_in,
        data_out => in4_imag_TDATA_int_regslice,
        vld_out => in4_imag_TVALID_int_regslice,
        ack_out => in4_imag_TREADY_int_regslice,
        apdone_blk => regslice_both_in4_imag_U_apdone_blk);

    regslice_both_out_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_real_TDATA_int_regslice,
        vld_in => out_real_TVALID_int_regslice,
        ack_in => out_real_TREADY_int_regslice,
        data_out => out_real_TDATA,
        vld_out => regslice_both_out_real_U_vld_out,
        ack_out => out_real_TREADY,
        apdone_blk => regslice_both_out_real_U_apdone_blk);

    regslice_both_out_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_imag_TDATA_int_regslice,
        vld_in => out_imag_TVALID_int_regslice,
        ack_in => out_imag_TREADY_int_regslice,
        data_out => out_imag_TDATA,
        vld_out => regslice_both_out_imag_U_vld_out,
        ack_out => out_imag_TREADY,
        apdone_blk => regslice_both_out_imag_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln91_1_fu_172_p2 <= std_logic_vector(signed(sext_ln91_1_fu_168_p1) + signed(in2_real_buffer_cast_fu_154_p1));
    add_ln91_fu_162_p2 <= std_logic_vector(signed(in1_real_buffer_cast_fu_150_p1) + signed(sext_ln91_fu_158_p1));
    add_ln92_fu_198_p2 <= std_logic_vector(signed(sext_ln92_fu_194_p1) + signed(shl_ln_fu_178_p3));
    add_ln96_1_fu_237_p2 <= std_logic_vector(signed(sext_ln96_1_fu_233_p1) + signed(in2_imag_buffer_cast_fu_219_p1));
    add_ln96_fu_227_p2 <= std_logic_vector(signed(in1_imag_buffer_cast_fu_215_p1) + signed(sext_ln96_fu_223_p1));
    add_ln97_fu_263_p2 <= std_logic_vector(signed(sext_ln97_fu_259_p1) + signed(shl_ln2_fu_243_p3));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state1_io, ap_block_state2_pp0_stage0_iter1, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1))) or ((ap_start = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state1_io) or (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter1, ap_block_state1_pp0_stage0_iter0, ap_block_state1_io, ap_block_state2_pp0_stage0_iter1, ap_block_state2_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state2_io) or (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1))) or ((ap_start = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state1_io) or (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0))));
    end process;


    ap_block_state1_io_assign_proc : process(out_real_TREADY_int_regslice, out_imag_TREADY_int_regslice)
    begin
                ap_block_state1_io <= ((out_imag_TREADY_int_regslice = ap_const_logic_0) or (out_real_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in1_real_TVALID_int_regslice, in1_imag_TVALID_int_regslice, in2_real_TVALID_int_regslice, in2_imag_TVALID_int_regslice, in3_real_TVALID_int_regslice, in3_imag_TVALID_int_regslice, in4_real_TVALID_int_regslice, in4_imag_TVALID_int_regslice, out_real_TREADY_int_regslice, out_imag_TREADY_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((out_imag_TREADY_int_regslice = ap_const_logic_0) or (out_real_TREADY_int_regslice = ap_const_logic_0) or (in4_imag_TVALID_int_regslice = ap_const_logic_0) or (in4_real_TVALID_int_regslice = ap_const_logic_0) or (in3_imag_TVALID_int_regslice = ap_const_logic_0) or (in3_real_TVALID_int_regslice = ap_const_logic_0) or (in2_imag_TVALID_int_regslice = ap_const_logic_0) or (in2_real_TVALID_int_regslice = ap_const_logic_0) or (in1_imag_TVALID_int_regslice = ap_const_logic_0) or (in1_real_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(out_real_TREADY_int_regslice, out_imag_TREADY_int_regslice)
    begin
                ap_block_state2_io <= ((out_imag_TREADY_int_regslice = ap_const_logic_0) or (out_real_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(regslice_both_out_real_U_apdone_blk, regslice_both_out_imag_U_apdone_blk, out_real_TREADY_int_regslice, out_imag_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((regslice_both_out_imag_U_apdone_blk = ap_const_logic_1) or (regslice_both_out_real_U_apdone_blk = ap_const_logic_1) or (out_imag_TREADY_int_regslice = ap_const_logic_0) or (out_real_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    in1_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in1_imag_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in1_imag_TDATA_blk_n <= in1_imag_TVALID_int_regslice;
        else 
            in1_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in1_imag_TREADY <= regslice_both_in1_imag_U_ack_in;

    in1_imag_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in1_imag_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in1_imag_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        in1_imag_buffer_cast_fu_215_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in1_imag_TDATA_int_regslice),17));


    in1_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in1_real_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in1_real_TDATA_blk_n <= in1_real_TVALID_int_regslice;
        else 
            in1_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in1_real_TREADY <= regslice_both_in1_real_U_ack_in;

    in1_real_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in1_real_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in1_real_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        in1_real_buffer_cast_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in1_real_TDATA_int_regslice),17));


    in2_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in2_imag_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in2_imag_TDATA_blk_n <= in2_imag_TVALID_int_regslice;
        else 
            in2_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in2_imag_TREADY <= regslice_both_in2_imag_U_ack_in;

    in2_imag_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in2_imag_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in2_imag_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        in2_imag_buffer_cast_fu_219_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in2_imag_TDATA_int_regslice),18));


    in2_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in2_real_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in2_real_TDATA_blk_n <= in2_real_TVALID_int_regslice;
        else 
            in2_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in2_real_TREADY <= regslice_both_in2_real_U_ack_in;

    in2_real_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in2_real_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in2_real_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        in2_real_buffer_cast_fu_154_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in2_real_TDATA_int_regslice),18));


    in3_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in3_imag_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in3_imag_TDATA_blk_n <= in3_imag_TVALID_int_regslice;
        else 
            in3_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in3_imag_TREADY <= regslice_both_in3_imag_U_ack_in;

    in3_imag_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in3_imag_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in3_imag_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in3_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in3_real_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in3_real_TDATA_blk_n <= in3_real_TVALID_int_regslice;
        else 
            in3_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in3_real_TREADY <= regslice_both_in3_real_U_ack_in;

    in3_real_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in3_real_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in3_real_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in4_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in4_imag_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in4_imag_TDATA_blk_n <= in4_imag_TVALID_int_regslice;
        else 
            in4_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in4_imag_TREADY <= regslice_both_in4_imag_U_ack_in;

    in4_imag_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in4_imag_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in4_imag_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in4_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in4_real_TVALID_int_regslice)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in4_real_TDATA_blk_n <= in4_real_TVALID_int_regslice;
        else 
            in4_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in4_real_TREADY <= regslice_both_in4_real_U_ack_in;

    in4_real_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in4_real_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in4_real_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, out_imag_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_imag_TDATA_blk_n <= out_imag_TREADY_int_regslice;
        else 
            out_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_imag_TDATA_int_regslice <= add_ln97_fu_263_p2(30 downto 15);
    out_imag_TVALID <= regslice_both_out_imag_U_vld_out;

    out_imag_TVALID_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_imag_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_imag_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, out_real_TREADY_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            out_real_TDATA_blk_n <= out_real_TREADY_int_regslice;
        else 
            out_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_real_TDATA_int_regslice <= add_ln92_fu_198_p2(30 downto 15);
    out_real_TVALID <= regslice_both_out_real_U_vld_out;

    out_real_TVALID_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            out_real_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_real_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln91_1_fu_168_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln91_fu_162_p2),18));

        sext_ln91_fu_158_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in3_real_TDATA_int_regslice),17));

        sext_ln92_fu_194_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1_fu_186_p3),31));

        sext_ln96_1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln96_fu_227_p2),18));

        sext_ln96_fu_223_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in3_imag_TDATA_int_regslice),17));

        sext_ln97_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln3_fu_251_p3),31));

    shl_ln1_fu_186_p3 <= (in4_real_TDATA_int_regslice & ap_const_lv13_0);
    shl_ln2_fu_243_p3 <= (add_ln96_1_fu_237_p2 & ap_const_lv13_0);
    shl_ln3_fu_251_p3 <= (in4_imag_TDATA_int_regslice & ap_const_lv13_0);
    shl_ln_fu_178_p3 <= (add_ln91_1_fu_172_p2 & ap_const_lv13_0);
end behav;
