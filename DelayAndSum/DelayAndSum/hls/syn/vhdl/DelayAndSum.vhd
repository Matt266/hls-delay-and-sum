-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity DelayAndSum is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in1_real_TVALID : IN STD_LOGIC;
    in1_imag_TVALID : IN STD_LOGIC;
    in2_real_TVALID : IN STD_LOGIC;
    in2_imag_TVALID : IN STD_LOGIC;
    in3_real_TVALID : IN STD_LOGIC;
    in3_imag_TVALID : IN STD_LOGIC;
    in4_real_TVALID : IN STD_LOGIC;
    in4_imag_TVALID : IN STD_LOGIC;
    out_real_TREADY : IN STD_LOGIC;
    out_imag_TREADY : IN STD_LOGIC;
    in1_real_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in1_real_TREADY : OUT STD_LOGIC;
    in1_imag_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in1_imag_TREADY : OUT STD_LOGIC;
    in2_real_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in2_real_TREADY : OUT STD_LOGIC;
    in2_imag_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in2_imag_TREADY : OUT STD_LOGIC;
    in3_real_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in3_real_TREADY : OUT STD_LOGIC;
    in3_imag_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in3_imag_TREADY : OUT STD_LOGIC;
    in4_real_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in4_real_TREADY : OUT STD_LOGIC;
    in4_imag_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    in4_imag_TREADY : OUT STD_LOGIC;
    out_real_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_real_TVALID : OUT STD_LOGIC;
    out_imag_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    out_imag_TVALID : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of DelayAndSum is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "DelayAndSum_DelayAndSum,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.380000,HLS_SYN_LAT=10,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1247,HLS_SYN_LUT=664,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state10_io : BOOLEAN;
    signal regslice_both_out_real_U_apdone_blk : STD_LOGIC;
    signal regslice_both_out_imag_U_apdone_blk : STD_LOGIC;
    signal ap_block_state11_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state11_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal w1_real : STD_LOGIC_VECTOR (15 downto 0);
    signal w1_imag : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_real : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_imag : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_real : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_imag : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_real : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_imag : STD_LOGIC_VECTOR (15 downto 0);
    signal in1_real_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal in1_imag_TDATA_blk_n : STD_LOGIC;
    signal in2_real_TDATA_blk_n : STD_LOGIC;
    signal in2_imag_TDATA_blk_n : STD_LOGIC;
    signal in3_real_TDATA_blk_n : STD_LOGIC;
    signal in3_imag_TDATA_blk_n : STD_LOGIC;
    signal in4_real_TDATA_blk_n : STD_LOGIC;
    signal in4_imag_TDATA_blk_n : STD_LOGIC;
    signal out_real_TDATA_blk_n : STD_LOGIC;
    signal out_imag_TDATA_blk_n : STD_LOGIC;
    signal in2_real_buffer_reg_392 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal in2_imag_buffer_reg_397 : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_real_buffer_reg_402 : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_real_buffer_reg_402_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_real_buffer_reg_402_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_imag_buffer_reg_407 : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_imag_buffer_reg_407_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_imag_buffer_reg_407_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_real_buffer_reg_412 : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_real_buffer_reg_412_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_real_buffer_reg_412_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_real_buffer_reg_412_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_real_buffer_reg_412_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_imag_buffer_reg_417 : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_imag_buffer_reg_417_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_imag_buffer_reg_417_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_imag_buffer_reg_417_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_imag_buffer_reg_417_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_real_buffer_reg_422 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_imag_buffer_reg_427 : STD_LOGIC_VECTOR (15 downto 0);
    signal w2_imag_buffer_reg_427_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_real_buffer_reg_432 : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_real_buffer_reg_432_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_real_buffer_reg_432_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_imag_buffer_reg_437 : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_imag_buffer_reg_437_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_imag_buffer_reg_437_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w3_imag_buffer_reg_437_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_real_buffer_reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_real_buffer_reg_442_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_real_buffer_reg_442_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_real_buffer_reg_442_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_real_buffer_reg_442_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_imag_buffer_reg_447 : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_imag_buffer_reg_447_pp0_iter1_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_imag_buffer_reg_447_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_imag_buffer_reg_447_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_imag_buffer_reg_447_pp0_iter4_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_imag_buffer_reg_447_pp0_iter5_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_fu_202_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln74_1_fu_206_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln74_2_fu_210_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln74_1_fu_218_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln74_1_reg_468 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln74_1_reg_468_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln80_fu_224_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln80_reg_473 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln80_reg_473_pp0_iter1_reg : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln75_fu_230_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln75_1_fu_233_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln75_1_reg_484 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln75_3_fu_236_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln75_3_reg_490 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln75_2_fu_239_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_286_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln76_fu_242_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln76_1_fu_245_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln76_1_reg_513 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln76_3_fu_248_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln76_3_reg_519 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_293_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_300_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln76_2_fu_251_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_308_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_316_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln77_fu_254_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln77_1_fu_257_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln77_1_reg_557 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln77_3_fu_260_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln77_3_reg_563 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_323_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_330_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal sext_ln77_2_fu_263_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_338_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_346_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_353_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_360_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_368_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln74_1_fu_218_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln74_1_fu_218_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln74_3_fu_214_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal mul_ln80_fu_224_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln80_fu_224_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_s_fu_266_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_376_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_0_fu_276_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_384_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal grp_fu_286_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_286_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_293_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_293_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_300_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_308_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_316_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_316_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_323_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_323_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_330_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_338_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_346_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_346_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_353_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_353_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_360_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_368_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_376_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_384_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_384_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_286_ce : STD_LOGIC;
    signal grp_fu_293_ce : STD_LOGIC;
    signal grp_fu_300_ce : STD_LOGIC;
    signal grp_fu_308_ce : STD_LOGIC;
    signal grp_fu_316_ce : STD_LOGIC;
    signal grp_fu_323_ce : STD_LOGIC;
    signal grp_fu_330_ce : STD_LOGIC;
    signal grp_fu_338_ce : STD_LOGIC;
    signal grp_fu_346_ce : STD_LOGIC;
    signal grp_fu_353_ce : STD_LOGIC;
    signal grp_fu_360_ce : STD_LOGIC;
    signal grp_fu_368_ce : STD_LOGIC;
    signal grp_fu_376_ce : STD_LOGIC;
    signal grp_fu_384_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to9 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal regslice_both_in1_real_U_apdone_blk : STD_LOGIC;
    signal in1_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in1_real_TVALID_int_regslice : STD_LOGIC;
    signal in1_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in1_real_U_ack_in : STD_LOGIC;
    signal regslice_both_in1_imag_U_apdone_blk : STD_LOGIC;
    signal in1_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in1_imag_TVALID_int_regslice : STD_LOGIC;
    signal in1_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in1_imag_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_real_U_apdone_blk : STD_LOGIC;
    signal in2_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in2_real_TVALID_int_regslice : STD_LOGIC;
    signal in2_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in2_real_U_ack_in : STD_LOGIC;
    signal regslice_both_in2_imag_U_apdone_blk : STD_LOGIC;
    signal in2_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in2_imag_TVALID_int_regslice : STD_LOGIC;
    signal in2_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in2_imag_U_ack_in : STD_LOGIC;
    signal regslice_both_in3_real_U_apdone_blk : STD_LOGIC;
    signal in3_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_real_TVALID_int_regslice : STD_LOGIC;
    signal in3_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in3_real_U_ack_in : STD_LOGIC;
    signal regslice_both_in3_imag_U_apdone_blk : STD_LOGIC;
    signal in3_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in3_imag_TVALID_int_regslice : STD_LOGIC;
    signal in3_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in3_imag_U_ack_in : STD_LOGIC;
    signal regslice_both_in4_real_U_apdone_blk : STD_LOGIC;
    signal in4_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_real_TVALID_int_regslice : STD_LOGIC;
    signal in4_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in4_real_U_ack_in : STD_LOGIC;
    signal regslice_both_in4_imag_U_apdone_blk : STD_LOGIC;
    signal in4_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal in4_imag_TVALID_int_regslice : STD_LOGIC;
    signal in4_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_in4_imag_U_ack_in : STD_LOGIC;
    signal out_real_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal out_real_TVALID_int_regslice : STD_LOGIC;
    signal out_real_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_real_U_vld_out : STD_LOGIC;
    signal out_imag_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal out_imag_TVALID_int_regslice : STD_LOGIC;
    signal out_imag_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_out_imag_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component DelayAndSum_mul_16s_16s_31_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component DelayAndSum_mac_muladd_16s_16s_31s_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component DelayAndSum_mac_mulsub_16s_16s_31s_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component DelayAndSum_mac_mulsub_16s_16s_31ns_31_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (30 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (30 downto 0) );
    end component;


    component DelayAndSum_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        w1_real : OUT STD_LOGIC_VECTOR (15 downto 0);
        w1_imag : OUT STD_LOGIC_VECTOR (15 downto 0);
        w2_real : OUT STD_LOGIC_VECTOR (15 downto 0);
        w2_imag : OUT STD_LOGIC_VECTOR (15 downto 0);
        w3_real : OUT STD_LOGIC_VECTOR (15 downto 0);
        w3_imag : OUT STD_LOGIC_VECTOR (15 downto 0);
        w4_real : OUT STD_LOGIC_VECTOR (15 downto 0);
        w4_imag : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component DelayAndSum_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    control_s_axi_U : component DelayAndSum_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        w1_real => w1_real,
        w1_imag => w1_imag,
        w2_real => w2_real,
        w2_imag => w2_imag,
        w3_real => w3_real,
        w3_imag => w3_imag,
        w4_real => w4_real,
        w4_imag => w4_imag);

    mul_16s_16s_31_1_1_U1 : component DelayAndSum_mul_16s_16s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => mul_ln74_1_fu_218_p0,
        din1 => mul_ln74_1_fu_218_p1,
        dout => mul_ln74_1_fu_218_p2);

    mul_16s_16s_31_1_1_U2 : component DelayAndSum_mul_16s_16s_31_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 31)
    port map (
        din0 => mul_ln80_fu_224_p0,
        din1 => mul_ln80_fu_224_p1,
        dout => mul_ln80_fu_224_p2);

    mac_muladd_16s_16s_31s_31_4_1_U3 : component DelayAndSum_mac_muladd_16s_16s_31s_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_286_p0,
        din1 => grp_fu_286_p1,
        din2 => mul_ln74_1_reg_468_pp0_iter1_reg,
        ce => grp_fu_286_ce,
        dout => grp_fu_286_p3);

    mac_mulsub_16s_16s_31s_31_4_1_U4 : component DelayAndSum_mac_mulsub_16s_16s_31s_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_293_p0,
        din1 => grp_fu_293_p1,
        din2 => mul_ln80_reg_473_pp0_iter1_reg,
        ce => grp_fu_293_ce,
        dout => grp_fu_293_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U5 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_300_p0,
        din1 => in2_real_buffer_reg_392,
        din2 => grp_fu_286_p3,
        ce => grp_fu_300_ce,
        dout => grp_fu_300_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U6 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_308_p0,
        din1 => in2_imag_buffer_reg_397,
        din2 => grp_fu_293_p3,
        ce => grp_fu_308_ce,
        dout => grp_fu_308_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U7 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_316_p0,
        din1 => grp_fu_316_p1,
        din2 => grp_fu_300_p3,
        ce => grp_fu_316_ce,
        dout => grp_fu_316_p3);

    mac_mulsub_16s_16s_31ns_31_4_1_U8 : component DelayAndSum_mac_mulsub_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_323_p0,
        din1 => grp_fu_323_p1,
        din2 => grp_fu_308_p3,
        ce => grp_fu_323_ce,
        dout => grp_fu_323_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U9 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_330_p0,
        din1 => in3_real_buffer_reg_402_pp0_iter2_reg,
        din2 => grp_fu_316_p3,
        ce => grp_fu_330_ce,
        dout => grp_fu_330_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U10 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_338_p0,
        din1 => in3_imag_buffer_reg_407_pp0_iter2_reg,
        din2 => grp_fu_323_p3,
        ce => grp_fu_338_ce,
        dout => grp_fu_338_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U11 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_346_p0,
        din1 => grp_fu_346_p1,
        din2 => grp_fu_330_p3,
        ce => grp_fu_346_ce,
        dout => grp_fu_346_p3);

    mac_mulsub_16s_16s_31ns_31_4_1_U12 : component DelayAndSum_mac_mulsub_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_353_p0,
        din1 => grp_fu_353_p1,
        din2 => grp_fu_338_p3,
        ce => grp_fu_353_ce,
        dout => grp_fu_353_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U13 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_360_p0,
        din1 => in4_real_buffer_reg_412_pp0_iter4_reg,
        din2 => grp_fu_346_p3,
        ce => grp_fu_360_ce,
        dout => grp_fu_360_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U14 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_368_p0,
        din1 => in4_imag_buffer_reg_417_pp0_iter4_reg,
        din2 => grp_fu_353_p3,
        ce => grp_fu_368_ce,
        dout => grp_fu_368_p3);

    mac_muladd_16s_16s_31ns_31_4_1_U15 : component DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_376_p0,
        din1 => grp_fu_376_p1,
        din2 => grp_fu_360_p3,
        ce => grp_fu_376_ce,
        dout => grp_fu_376_p3);

    mac_mulsub_16s_16s_31ns_31_4_1_U16 : component DelayAndSum_mac_mulsub_16s_16s_31ns_31_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 31,
        dout_WIDTH => 31)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_384_p0,
        din1 => grp_fu_384_p1,
        din2 => grp_fu_368_p3,
        ce => grp_fu_384_ce,
        dout => grp_fu_384_p3);

    regslice_both_in1_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_real_TDATA,
        vld_in => in1_real_TVALID,
        ack_in => regslice_both_in1_real_U_ack_in,
        data_out => in1_real_TDATA_int_regslice,
        vld_out => in1_real_TVALID_int_regslice,
        ack_out => in1_real_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_real_U_apdone_blk);

    regslice_both_in1_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in1_imag_TDATA,
        vld_in => in1_imag_TVALID,
        ack_in => regslice_both_in1_imag_U_ack_in,
        data_out => in1_imag_TDATA_int_regslice,
        vld_out => in1_imag_TVALID_int_regslice,
        ack_out => in1_imag_TREADY_int_regslice,
        apdone_blk => regslice_both_in1_imag_U_apdone_blk);

    regslice_both_in2_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_real_TDATA,
        vld_in => in2_real_TVALID,
        ack_in => regslice_both_in2_real_U_ack_in,
        data_out => in2_real_TDATA_int_regslice,
        vld_out => in2_real_TVALID_int_regslice,
        ack_out => in2_real_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_real_U_apdone_blk);

    regslice_both_in2_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in2_imag_TDATA,
        vld_in => in2_imag_TVALID,
        ack_in => regslice_both_in2_imag_U_ack_in,
        data_out => in2_imag_TDATA_int_regslice,
        vld_out => in2_imag_TVALID_int_regslice,
        ack_out => in2_imag_TREADY_int_regslice,
        apdone_blk => regslice_both_in2_imag_U_apdone_blk);

    regslice_both_in3_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in3_real_TDATA,
        vld_in => in3_real_TVALID,
        ack_in => regslice_both_in3_real_U_ack_in,
        data_out => in3_real_TDATA_int_regslice,
        vld_out => in3_real_TVALID_int_regslice,
        ack_out => in3_real_TREADY_int_regslice,
        apdone_blk => regslice_both_in3_real_U_apdone_blk);

    regslice_both_in3_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in3_imag_TDATA,
        vld_in => in3_imag_TVALID,
        ack_in => regslice_both_in3_imag_U_ack_in,
        data_out => in3_imag_TDATA_int_regslice,
        vld_out => in3_imag_TVALID_int_regslice,
        ack_out => in3_imag_TREADY_int_regslice,
        apdone_blk => regslice_both_in3_imag_U_apdone_blk);

    regslice_both_in4_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in4_real_TDATA,
        vld_in => in4_real_TVALID,
        ack_in => regslice_both_in4_real_U_ack_in,
        data_out => in4_real_TDATA_int_regslice,
        vld_out => in4_real_TVALID_int_regslice,
        ack_out => in4_real_TREADY_int_regslice,
        apdone_blk => regslice_both_in4_real_U_apdone_blk);

    regslice_both_in4_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => in4_imag_TDATA,
        vld_in => in4_imag_TVALID,
        ack_in => regslice_both_in4_imag_U_ack_in,
        data_out => in4_imag_TDATA_int_regslice,
        vld_out => in4_imag_TVALID_int_regslice,
        ack_out => in4_imag_TREADY_int_regslice,
        apdone_blk => regslice_both_in4_imag_U_apdone_blk);

    regslice_both_out_real_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_real_TDATA_int_regslice,
        vld_in => out_real_TVALID_int_regslice,
        ack_in => out_real_TREADY_int_regslice,
        data_out => out_real_TDATA,
        vld_out => regslice_both_out_real_U_vld_out,
        ack_out => out_real_TREADY,
        apdone_blk => regslice_both_out_real_U_apdone_blk);

    regslice_both_out_imag_U : component DelayAndSum_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => out_imag_TDATA_int_regslice,
        vld_in => out_imag_TVALID_int_regslice,
        ack_in => out_imag_TREADY_int_regslice,
        data_out => out_imag_TDATA,
        vld_out => regslice_both_out_imag_U_vld_out,
        ack_out => out_imag_TREADY,
        apdone_blk => regslice_both_out_imag_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                in2_imag_buffer_reg_397 <= in2_imag_TDATA_int_regslice;
                in2_real_buffer_reg_392 <= in2_real_TDATA_int_regslice;
                in3_imag_buffer_reg_407 <= in3_imag_TDATA_int_regslice;
                in3_imag_buffer_reg_407_pp0_iter1_reg <= in3_imag_buffer_reg_407;
                in3_real_buffer_reg_402 <= in3_real_TDATA_int_regslice;
                in3_real_buffer_reg_402_pp0_iter1_reg <= in3_real_buffer_reg_402;
                in4_imag_buffer_reg_417 <= in4_imag_TDATA_int_regslice;
                in4_imag_buffer_reg_417_pp0_iter1_reg <= in4_imag_buffer_reg_417;
                in4_real_buffer_reg_412 <= in4_real_TDATA_int_regslice;
                in4_real_buffer_reg_412_pp0_iter1_reg <= in4_real_buffer_reg_412;
                mul_ln74_1_reg_468 <= mul_ln74_1_fu_218_p2;
                mul_ln74_1_reg_468_pp0_iter1_reg <= mul_ln74_1_reg_468;
                mul_ln80_reg_473 <= mul_ln80_fu_224_p2;
                mul_ln80_reg_473_pp0_iter1_reg <= mul_ln80_reg_473;
                sext_ln75_1_reg_484 <= sext_ln75_1_fu_233_p1;
                sext_ln75_3_reg_490 <= sext_ln75_3_fu_236_p1;
                w2_imag_buffer_reg_427 <= w2_imag;
                w2_imag_buffer_reg_427_pp0_iter1_reg <= w2_imag_buffer_reg_427;
                w2_real_buffer_reg_422 <= w2_real;
                w3_imag_buffer_reg_437 <= w3_imag;
                w3_imag_buffer_reg_437_pp0_iter1_reg <= w3_imag_buffer_reg_437;
                w3_real_buffer_reg_432 <= w3_real;
                w3_real_buffer_reg_432_pp0_iter1_reg <= w3_real_buffer_reg_432;
                w4_imag_buffer_reg_447 <= w4_imag;
                w4_imag_buffer_reg_447_pp0_iter1_reg <= w4_imag_buffer_reg_447;
                w4_real_buffer_reg_442 <= w4_real;
                w4_real_buffer_reg_442_pp0_iter1_reg <= w4_real_buffer_reg_442;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                in3_imag_buffer_reg_407_pp0_iter2_reg <= in3_imag_buffer_reg_407_pp0_iter1_reg;
                in3_real_buffer_reg_402_pp0_iter2_reg <= in3_real_buffer_reg_402_pp0_iter1_reg;
                in4_imag_buffer_reg_417_pp0_iter2_reg <= in4_imag_buffer_reg_417_pp0_iter1_reg;
                in4_imag_buffer_reg_417_pp0_iter3_reg <= in4_imag_buffer_reg_417_pp0_iter2_reg;
                in4_imag_buffer_reg_417_pp0_iter4_reg <= in4_imag_buffer_reg_417_pp0_iter3_reg;
                in4_real_buffer_reg_412_pp0_iter2_reg <= in4_real_buffer_reg_412_pp0_iter1_reg;
                in4_real_buffer_reg_412_pp0_iter3_reg <= in4_real_buffer_reg_412_pp0_iter2_reg;
                in4_real_buffer_reg_412_pp0_iter4_reg <= in4_real_buffer_reg_412_pp0_iter3_reg;
                sext_ln76_1_reg_513 <= sext_ln76_1_fu_245_p1;
                sext_ln76_3_reg_519 <= sext_ln76_3_fu_248_p1;
                sext_ln77_1_reg_557 <= sext_ln77_1_fu_257_p1;
                sext_ln77_3_reg_563 <= sext_ln77_3_fu_260_p1;
                w3_imag_buffer_reg_437_pp0_iter2_reg <= w3_imag_buffer_reg_437_pp0_iter1_reg;
                w3_imag_buffer_reg_437_pp0_iter3_reg <= w3_imag_buffer_reg_437_pp0_iter2_reg;
                w3_real_buffer_reg_432_pp0_iter2_reg <= w3_real_buffer_reg_432_pp0_iter1_reg;
                w4_imag_buffer_reg_447_pp0_iter2_reg <= w4_imag_buffer_reg_447_pp0_iter1_reg;
                w4_imag_buffer_reg_447_pp0_iter3_reg <= w4_imag_buffer_reg_447_pp0_iter2_reg;
                w4_imag_buffer_reg_447_pp0_iter4_reg <= w4_imag_buffer_reg_447_pp0_iter3_reg;
                w4_imag_buffer_reg_447_pp0_iter5_reg <= w4_imag_buffer_reg_447_pp0_iter4_reg;
                w4_real_buffer_reg_442_pp0_iter2_reg <= w4_real_buffer_reg_442_pp0_iter1_reg;
                w4_real_buffer_reg_442_pp0_iter3_reg <= w4_real_buffer_reg_442_pp0_iter2_reg;
                w4_real_buffer_reg_442_pp0_iter4_reg <= w4_real_buffer_reg_442_pp0_iter3_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_block_state1_pp0_stage0_iter0, ap_block_state10_pp0_stage0_iter9, ap_block_state11_pp0_stage0_iter10)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9)) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter10)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_block_state1_pp0_stage0_iter0, ap_block_state10_pp0_stage0_iter9, ap_block_state10_io, ap_block_state11_pp0_stage0_iter10, ap_block_state11_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9))) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter10))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_block_state1_pp0_stage0_iter0, ap_block_state10_pp0_stage0_iter9, ap_block_state10_io, ap_block_state11_pp0_stage0_iter10, ap_block_state11_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_io) or (ap_const_boolean_1 = ap_block_state10_pp0_stage0_iter9))) or ((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_io) or (ap_const_boolean_1 = ap_block_state11_pp0_stage0_iter10))));
    end process;


    ap_block_state10_io_assign_proc : process(out_real_TREADY_int_regslice, out_imag_TREADY_int_regslice)
    begin
                ap_block_state10_io <= ((out_imag_TREADY_int_regslice = ap_const_logic_0) or (out_real_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state10_pp0_stage0_iter9_assign_proc : process(out_real_TREADY_int_regslice, out_imag_TREADY_int_regslice)
    begin
                ap_block_state10_pp0_stage0_iter9 <= ((out_imag_TREADY_int_regslice = ap_const_logic_0) or (out_real_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state11_io_assign_proc : process(out_real_TREADY_int_regslice, out_imag_TREADY_int_regslice)
    begin
                ap_block_state11_io <= ((out_imag_TREADY_int_regslice = ap_const_logic_0) or (out_real_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage0_iter10_assign_proc : process(regslice_both_out_real_U_apdone_blk, regslice_both_out_imag_U_apdone_blk, out_real_TREADY_int_regslice, out_imag_TREADY_int_regslice)
    begin
                ap_block_state11_pp0_stage0_iter10 <= ((regslice_both_out_real_U_apdone_blk = ap_const_logic_1) or (out_imag_TREADY_int_regslice = ap_const_logic_0) or (out_real_TREADY_int_regslice = ap_const_logic_0) or (regslice_both_out_imag_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in1_real_TVALID_int_regslice, in1_imag_TVALID_int_regslice, in2_real_TVALID_int_regslice, in2_imag_TVALID_int_regslice, in3_real_TVALID_int_regslice, in3_imag_TVALID_int_regslice, in4_real_TVALID_int_regslice, in4_imag_TVALID_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((in4_imag_TVALID_int_regslice = ap_const_logic_0) or (in4_real_TVALID_int_regslice = ap_const_logic_0) or (in3_imag_TVALID_int_regslice = ap_const_logic_0) or (in3_real_TVALID_int_regslice = ap_const_logic_0) or (in2_imag_TVALID_int_regslice = ap_const_logic_0) or (in2_real_TVALID_int_regslice = ap_const_logic_0) or (in1_imag_TVALID_int_regslice = ap_const_logic_0) or (in1_real_TVALID_int_regslice = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter10, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10)
    begin
        if (((ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to9_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to9 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to9)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to9 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    grp_fu_286_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_286_ce <= ap_const_logic_1;
        else 
            grp_fu_286_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_286_p0 <= sext_ln74_fu_202_p1(16 - 1 downto 0);
    grp_fu_286_p1 <= sext_ln74_1_fu_206_p1(16 - 1 downto 0);

    grp_fu_293_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_293_ce <= ap_const_logic_1;
        else 
            grp_fu_293_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_293_p0 <= sext_ln74_2_fu_210_p1(16 - 1 downto 0);
    grp_fu_293_p1 <= sext_ln74_1_fu_206_p1(16 - 1 downto 0);

    grp_fu_300_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_300_ce <= ap_const_logic_1;
        else 
            grp_fu_300_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_300_p0 <= sext_ln75_fu_230_p1(16 - 1 downto 0);

    grp_fu_308_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_308_ce <= ap_const_logic_1;
        else 
            grp_fu_308_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_308_p0 <= sext_ln75_fu_230_p1(16 - 1 downto 0);

    grp_fu_316_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_316_ce <= ap_const_logic_1;
        else 
            grp_fu_316_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_316_p0 <= sext_ln75_2_fu_239_p1(16 - 1 downto 0);
    grp_fu_316_p1 <= sext_ln75_3_reg_490(16 - 1 downto 0);

    grp_fu_323_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_323_ce <= ap_const_logic_1;
        else 
            grp_fu_323_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_323_p0 <= sext_ln75_2_fu_239_p1(16 - 1 downto 0);
    grp_fu_323_p1 <= sext_ln75_1_reg_484(16 - 1 downto 0);

    grp_fu_330_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_330_ce <= ap_const_logic_1;
        else 
            grp_fu_330_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_330_p0 <= sext_ln76_fu_242_p1(16 - 1 downto 0);

    grp_fu_338_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_338_ce <= ap_const_logic_1;
        else 
            grp_fu_338_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_338_p0 <= sext_ln76_fu_242_p1(16 - 1 downto 0);

    grp_fu_346_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_346_ce <= ap_const_logic_1;
        else 
            grp_fu_346_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_346_p0 <= sext_ln76_2_fu_251_p1(16 - 1 downto 0);
    grp_fu_346_p1 <= sext_ln76_3_reg_519(16 - 1 downto 0);

    grp_fu_353_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_353_ce <= ap_const_logic_1;
        else 
            grp_fu_353_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_353_p0 <= sext_ln76_2_fu_251_p1(16 - 1 downto 0);
    grp_fu_353_p1 <= sext_ln76_1_reg_513(16 - 1 downto 0);

    grp_fu_360_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_360_ce <= ap_const_logic_1;
        else 
            grp_fu_360_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_360_p0 <= sext_ln77_fu_254_p1(16 - 1 downto 0);

    grp_fu_368_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_368_ce <= ap_const_logic_1;
        else 
            grp_fu_368_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_368_p0 <= sext_ln77_fu_254_p1(16 - 1 downto 0);

    grp_fu_376_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_376_ce <= ap_const_logic_1;
        else 
            grp_fu_376_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_376_p0 <= sext_ln77_2_fu_263_p1(16 - 1 downto 0);
    grp_fu_376_p1 <= sext_ln77_3_reg_563(16 - 1 downto 0);

    grp_fu_384_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_384_ce <= ap_const_logic_1;
        else 
            grp_fu_384_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_384_p0 <= sext_ln77_2_fu_263_p1(16 - 1 downto 0);
    grp_fu_384_p1 <= sext_ln77_1_reg_557(16 - 1 downto 0);

    in1_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in1_imag_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in1_imag_TDATA_blk_n <= in1_imag_TVALID_int_regslice;
        else 
            in1_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in1_imag_TREADY <= regslice_both_in1_imag_U_ack_in;

    in1_imag_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in1_imag_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in1_imag_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in1_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in1_real_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in1_real_TDATA_blk_n <= in1_real_TVALID_int_regslice;
        else 
            in1_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in1_real_TREADY <= regslice_both_in1_real_U_ack_in;

    in1_real_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in1_real_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in1_real_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in2_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in2_imag_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in2_imag_TDATA_blk_n <= in2_imag_TVALID_int_regslice;
        else 
            in2_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in2_imag_TREADY <= regslice_both_in2_imag_U_ack_in;

    in2_imag_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in2_imag_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in2_imag_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in2_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in2_real_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in2_real_TDATA_blk_n <= in2_real_TVALID_int_regslice;
        else 
            in2_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in2_real_TREADY <= regslice_both_in2_real_U_ack_in;

    in2_real_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in2_real_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in2_real_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in3_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in3_imag_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in3_imag_TDATA_blk_n <= in3_imag_TVALID_int_regslice;
        else 
            in3_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in3_imag_TREADY <= regslice_both_in3_imag_U_ack_in;

    in3_imag_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in3_imag_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in3_imag_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in3_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in3_real_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in3_real_TDATA_blk_n <= in3_real_TVALID_int_regslice;
        else 
            in3_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in3_real_TREADY <= regslice_both_in3_real_U_ack_in;

    in3_real_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in3_real_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in3_real_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in4_imag_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in4_imag_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in4_imag_TDATA_blk_n <= in4_imag_TVALID_int_regslice;
        else 
            in4_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in4_imag_TREADY <= regslice_both_in4_imag_U_ack_in;

    in4_imag_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in4_imag_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in4_imag_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    in4_real_TDATA_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, in4_real_TVALID_int_regslice)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            in4_real_TDATA_blk_n <= in4_real_TVALID_int_regslice;
        else 
            in4_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in4_real_TREADY <= regslice_both_in4_real_U_ack_in;

    in4_real_TREADY_int_regslice_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            in4_real_TREADY_int_regslice <= ap_const_logic_1;
        else 
            in4_real_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln74_1_fu_218_p0 <= sext_ln74_2_fu_210_p1(16 - 1 downto 0);
    mul_ln74_1_fu_218_p1 <= sext_ln74_3_fu_214_p1(16 - 1 downto 0);
    mul_ln80_fu_224_p0 <= sext_ln74_fu_202_p1(16 - 1 downto 0);
    mul_ln80_fu_224_p1 <= sext_ln74_3_fu_214_p1(16 - 1 downto 0);

    out_imag_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0, out_imag_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_imag_TDATA_blk_n <= out_imag_TREADY_int_regslice;
        else 
            out_imag_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_imag_TDATA_int_regslice <= p_0_fu_276_p1(30 downto 15);
    out_imag_TVALID <= regslice_both_out_imag_U_vld_out;

    out_imag_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_imag_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_imag_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    out_real_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_block_pp0_stage0, out_real_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter10 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            out_real_TDATA_blk_n <= out_real_TREADY_int_regslice;
        else 
            out_real_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_real_TDATA_int_regslice <= p_s_fu_266_p1(30 downto 15);
    out_real_TVALID <= regslice_both_out_real_U_vld_out;

    out_real_TVALID_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            out_real_TVALID_int_regslice <= ap_const_logic_1;
        else 
            out_real_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_0_fu_276_p1 <= grp_fu_384_p3;
    p_s_fu_266_p1 <= grp_fu_376_p3;
        sext_ln74_1_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in1_real_TDATA_int_regslice),31));

        sext_ln74_2_fu_210_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w1_imag),31));

        sext_ln74_3_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in1_imag_TDATA_int_regslice),31));

        sext_ln74_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w1_real),31));

        sext_ln75_1_fu_233_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in2_real_buffer_reg_392),31));

        sext_ln75_2_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w2_imag_buffer_reg_427_pp0_iter1_reg),31));

        sext_ln75_3_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in2_imag_buffer_reg_397),31));

        sext_ln75_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w2_real_buffer_reg_422),31));

        sext_ln76_1_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in3_real_buffer_reg_402_pp0_iter2_reg),31));

        sext_ln76_2_fu_251_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w3_imag_buffer_reg_437_pp0_iter3_reg),31));

        sext_ln76_3_fu_248_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in3_imag_buffer_reg_407_pp0_iter2_reg),31));

        sext_ln76_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w3_real_buffer_reg_432_pp0_iter2_reg),31));

        sext_ln77_1_fu_257_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in4_real_buffer_reg_412_pp0_iter4_reg),31));

        sext_ln77_2_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w4_imag_buffer_reg_447_pp0_iter5_reg),31));

        sext_ln77_3_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(in4_imag_buffer_reg_417_pp0_iter4_reg),31));

        sext_ln77_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(w4_real_buffer_reg_442_pp0_iter4_reg),31));

end behav;
