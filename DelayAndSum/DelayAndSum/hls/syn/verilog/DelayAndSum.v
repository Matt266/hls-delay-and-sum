// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DelayAndSum_DelayAndSum,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.380000,HLS_SYN_LAT=10,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1247,HLS_SYN_LUT=664,HLS_VERSION=2024_1}" *)

module DelayAndSum (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_real_TVALID,
        in1_imag_TVALID,
        in2_real_TVALID,
        in2_imag_TVALID,
        in3_real_TVALID,
        in3_imag_TVALID,
        in4_real_TVALID,
        in4_imag_TVALID,
        out_real_TREADY,
        out_imag_TREADY,
        in1_real_TDATA,
        in1_real_TREADY,
        in1_imag_TDATA,
        in1_imag_TREADY,
        in2_real_TDATA,
        in2_real_TREADY,
        in2_imag_TDATA,
        in2_imag_TREADY,
        in3_real_TDATA,
        in3_real_TREADY,
        in3_imag_TDATA,
        in3_imag_TREADY,
        in4_real_TDATA,
        in4_real_TREADY,
        in4_imag_TDATA,
        in4_imag_TREADY,
        out_real_TDATA,
        out_real_TVALID,
        out_imag_TDATA,
        out_imag_TVALID,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in1_real_TVALID;
input   in1_imag_TVALID;
input   in2_real_TVALID;
input   in2_imag_TVALID;
input   in3_real_TVALID;
input   in3_imag_TVALID;
input   in4_real_TVALID;
input   in4_imag_TVALID;
input   out_real_TREADY;
input   out_imag_TREADY;
input  [15:0] in1_real_TDATA;
output   in1_real_TREADY;
input  [15:0] in1_imag_TDATA;
output   in1_imag_TREADY;
input  [15:0] in2_real_TDATA;
output   in2_real_TREADY;
input  [15:0] in2_imag_TDATA;
output   in2_imag_TREADY;
input  [15:0] in3_real_TDATA;
output   in3_real_TREADY;
input  [15:0] in3_imag_TDATA;
output   in3_imag_TREADY;
input  [15:0] in4_real_TDATA;
output   in4_real_TREADY;
input  [15:0] in4_imag_TDATA;
output   in4_imag_TREADY;
output  [15:0] out_real_TDATA;
output   out_real_TVALID;
output  [15:0] out_imag_TDATA;
output   out_imag_TVALID;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_state10_io;
wire    regslice_both_out_real_U_apdone_blk;
wire    regslice_both_out_imag_U_apdone_blk;
reg    ap_block_state11_pp0_stage0_iter10;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage0_subdone;
wire   [15:0] w1_real;
wire   [15:0] w1_imag;
wire   [15:0] w2_real;
wire   [15:0] w2_imag;
wire   [15:0] w3_real;
wire   [15:0] w3_imag;
wire   [15:0] w4_real;
wire   [15:0] w4_imag;
reg    in1_real_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    in1_imag_TDATA_blk_n;
reg    in2_real_TDATA_blk_n;
reg    in2_imag_TDATA_blk_n;
reg    in3_real_TDATA_blk_n;
reg    in3_imag_TDATA_blk_n;
reg    in4_real_TDATA_blk_n;
reg    in4_imag_TDATA_blk_n;
reg    out_real_TDATA_blk_n;
reg    out_imag_TDATA_blk_n;
reg  signed [15:0] in2_real_buffer_reg_392;
reg    ap_block_pp0_stage0_11001;
reg  signed [15:0] in2_imag_buffer_reg_397;
reg   [15:0] in3_real_buffer_reg_402;
reg   [15:0] in3_real_buffer_reg_402_pp0_iter1_reg;
reg  signed [15:0] in3_real_buffer_reg_402_pp0_iter2_reg;
reg   [15:0] in3_imag_buffer_reg_407;
reg   [15:0] in3_imag_buffer_reg_407_pp0_iter1_reg;
reg  signed [15:0] in3_imag_buffer_reg_407_pp0_iter2_reg;
reg   [15:0] in4_real_buffer_reg_412;
reg   [15:0] in4_real_buffer_reg_412_pp0_iter1_reg;
reg   [15:0] in4_real_buffer_reg_412_pp0_iter2_reg;
reg   [15:0] in4_real_buffer_reg_412_pp0_iter3_reg;
reg  signed [15:0] in4_real_buffer_reg_412_pp0_iter4_reg;
reg   [15:0] in4_imag_buffer_reg_417;
reg   [15:0] in4_imag_buffer_reg_417_pp0_iter1_reg;
reg   [15:0] in4_imag_buffer_reg_417_pp0_iter2_reg;
reg   [15:0] in4_imag_buffer_reg_417_pp0_iter3_reg;
reg  signed [15:0] in4_imag_buffer_reg_417_pp0_iter4_reg;
reg   [15:0] w2_real_buffer_reg_422;
reg   [15:0] w2_imag_buffer_reg_427;
reg   [15:0] w2_imag_buffer_reg_427_pp0_iter1_reg;
reg   [15:0] w3_real_buffer_reg_432;
reg   [15:0] w3_real_buffer_reg_432_pp0_iter1_reg;
reg   [15:0] w3_real_buffer_reg_432_pp0_iter2_reg;
reg   [15:0] w3_imag_buffer_reg_437;
reg   [15:0] w3_imag_buffer_reg_437_pp0_iter1_reg;
reg   [15:0] w3_imag_buffer_reg_437_pp0_iter2_reg;
reg   [15:0] w3_imag_buffer_reg_437_pp0_iter3_reg;
reg   [15:0] w4_real_buffer_reg_442;
reg   [15:0] w4_real_buffer_reg_442_pp0_iter1_reg;
reg   [15:0] w4_real_buffer_reg_442_pp0_iter2_reg;
reg   [15:0] w4_real_buffer_reg_442_pp0_iter3_reg;
reg   [15:0] w4_real_buffer_reg_442_pp0_iter4_reg;
reg   [15:0] w4_imag_buffer_reg_447;
reg   [15:0] w4_imag_buffer_reg_447_pp0_iter1_reg;
reg   [15:0] w4_imag_buffer_reg_447_pp0_iter2_reg;
reg   [15:0] w4_imag_buffer_reg_447_pp0_iter3_reg;
reg   [15:0] w4_imag_buffer_reg_447_pp0_iter4_reg;
reg   [15:0] w4_imag_buffer_reg_447_pp0_iter5_reg;
wire  signed [30:0] sext_ln74_fu_202_p1;
wire  signed [30:0] sext_ln74_1_fu_206_p1;
wire  signed [30:0] sext_ln74_2_fu_210_p1;
wire   [30:0] mul_ln74_1_fu_218_p2;
reg   [30:0] mul_ln74_1_reg_468;
reg  signed [30:0] mul_ln74_1_reg_468_pp0_iter1_reg;
wire   [30:0] mul_ln80_fu_224_p2;
reg   [30:0] mul_ln80_reg_473;
reg  signed [30:0] mul_ln80_reg_473_pp0_iter1_reg;
wire  signed [30:0] sext_ln75_fu_230_p1;
wire  signed [30:0] sext_ln75_1_fu_233_p1;
reg  signed [30:0] sext_ln75_1_reg_484;
wire  signed [30:0] sext_ln75_3_fu_236_p1;
reg  signed [30:0] sext_ln75_3_reg_490;
wire  signed [30:0] sext_ln75_2_fu_239_p1;
wire   [30:0] grp_fu_286_p3;
wire  signed [30:0] sext_ln76_fu_242_p1;
wire  signed [30:0] sext_ln76_1_fu_245_p1;
reg  signed [30:0] sext_ln76_1_reg_513;
wire  signed [30:0] sext_ln76_3_fu_248_p1;
reg  signed [30:0] sext_ln76_3_reg_519;
wire   [30:0] grp_fu_293_p3;
wire   [30:0] grp_fu_300_p3;
wire  signed [30:0] sext_ln76_2_fu_251_p1;
wire   [30:0] grp_fu_308_p3;
wire   [30:0] grp_fu_316_p3;
wire  signed [30:0] sext_ln77_fu_254_p1;
wire  signed [30:0] sext_ln77_1_fu_257_p1;
reg  signed [30:0] sext_ln77_1_reg_557;
wire  signed [30:0] sext_ln77_3_fu_260_p1;
reg  signed [30:0] sext_ln77_3_reg_563;
wire   [30:0] grp_fu_323_p3;
wire   [30:0] grp_fu_330_p3;
wire  signed [30:0] sext_ln77_2_fu_263_p1;
wire   [30:0] grp_fu_338_p3;
wire   [30:0] grp_fu_346_p3;
wire   [30:0] grp_fu_353_p3;
wire   [30:0] grp_fu_360_p3;
wire   [30:0] grp_fu_368_p3;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] mul_ln74_1_fu_218_p0;
wire  signed [15:0] mul_ln74_1_fu_218_p1;
wire  signed [30:0] sext_ln74_3_fu_214_p1;
wire  signed [15:0] mul_ln80_fu_224_p0;
wire  signed [15:0] mul_ln80_fu_224_p1;
wire  signed [30:0] p_s_fu_266_p1;
wire   [30:0] grp_fu_376_p3;
wire  signed [30:0] p_0_fu_276_p1;
wire   [30:0] grp_fu_384_p3;
wire  signed [15:0] grp_fu_286_p0;
wire  signed [15:0] grp_fu_286_p1;
wire  signed [15:0] grp_fu_293_p0;
wire  signed [15:0] grp_fu_293_p1;
wire  signed [15:0] grp_fu_300_p0;
wire  signed [15:0] grp_fu_308_p0;
wire  signed [15:0] grp_fu_316_p0;
wire  signed [15:0] grp_fu_316_p1;
wire  signed [15:0] grp_fu_323_p0;
wire  signed [15:0] grp_fu_323_p1;
wire  signed [15:0] grp_fu_330_p0;
wire  signed [15:0] grp_fu_338_p0;
wire  signed [15:0] grp_fu_346_p0;
wire  signed [15:0] grp_fu_346_p1;
wire  signed [15:0] grp_fu_353_p0;
wire  signed [15:0] grp_fu_353_p1;
wire  signed [15:0] grp_fu_360_p0;
wire  signed [15:0] grp_fu_368_p0;
wire  signed [15:0] grp_fu_376_p0;
wire  signed [15:0] grp_fu_376_p1;
wire  signed [15:0] grp_fu_384_p0;
wire  signed [15:0] grp_fu_384_p1;
reg    grp_fu_286_ce;
reg    grp_fu_293_ce;
reg    grp_fu_300_ce;
reg    grp_fu_308_ce;
reg    grp_fu_316_ce;
reg    grp_fu_323_ce;
reg    grp_fu_330_ce;
reg    grp_fu_338_ce;
reg    grp_fu_346_ce;
reg    grp_fu_353_ce;
reg    grp_fu_360_ce;
reg    grp_fu_368_ce;
reg    grp_fu_376_ce;
reg    grp_fu_384_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to9;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in1_real_U_apdone_blk;
wire   [15:0] in1_real_TDATA_int_regslice;
wire    in1_real_TVALID_int_regslice;
reg    in1_real_TREADY_int_regslice;
wire    regslice_both_in1_real_U_ack_in;
wire    regslice_both_in1_imag_U_apdone_blk;
wire   [15:0] in1_imag_TDATA_int_regslice;
wire    in1_imag_TVALID_int_regslice;
reg    in1_imag_TREADY_int_regslice;
wire    regslice_both_in1_imag_U_ack_in;
wire    regslice_both_in2_real_U_apdone_blk;
wire   [15:0] in2_real_TDATA_int_regslice;
wire    in2_real_TVALID_int_regslice;
reg    in2_real_TREADY_int_regslice;
wire    regslice_both_in2_real_U_ack_in;
wire    regslice_both_in2_imag_U_apdone_blk;
wire   [15:0] in2_imag_TDATA_int_regslice;
wire    in2_imag_TVALID_int_regslice;
reg    in2_imag_TREADY_int_regslice;
wire    regslice_both_in2_imag_U_ack_in;
wire    regslice_both_in3_real_U_apdone_blk;
wire   [15:0] in3_real_TDATA_int_regslice;
wire    in3_real_TVALID_int_regslice;
reg    in3_real_TREADY_int_regslice;
wire    regslice_both_in3_real_U_ack_in;
wire    regslice_both_in3_imag_U_apdone_blk;
wire   [15:0] in3_imag_TDATA_int_regslice;
wire    in3_imag_TVALID_int_regslice;
reg    in3_imag_TREADY_int_regslice;
wire    regslice_both_in3_imag_U_ack_in;
wire    regslice_both_in4_real_U_apdone_blk;
wire   [15:0] in4_real_TDATA_int_regslice;
wire    in4_real_TVALID_int_regslice;
reg    in4_real_TREADY_int_regslice;
wire    regslice_both_in4_real_U_ack_in;
wire    regslice_both_in4_imag_U_apdone_blk;
wire   [15:0] in4_imag_TDATA_int_regslice;
wire    in4_imag_TVALID_int_regslice;
reg    in4_imag_TREADY_int_regslice;
wire    regslice_both_in4_imag_U_ack_in;
wire   [15:0] out_real_TDATA_int_regslice;
reg    out_real_TVALID_int_regslice;
wire    out_real_TREADY_int_regslice;
wire    regslice_both_out_real_U_vld_out;
wire   [15:0] out_imag_TDATA_int_regslice;
reg    out_imag_TVALID_int_regslice;
wire    out_imag_TREADY_int_regslice;
wire    regslice_both_out_imag_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
end

DelayAndSum_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .w1_real(w1_real),
    .w1_imag(w1_imag),
    .w2_real(w2_real),
    .w2_imag(w2_imag),
    .w3_real(w3_real),
    .w3_imag(w3_imag),
    .w4_real(w4_real),
    .w4_imag(w4_imag)
);

DelayAndSum_mul_16s_16s_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
mul_16s_16s_31_1_1_U1(
    .din0(mul_ln74_1_fu_218_p0),
    .din1(mul_ln74_1_fu_218_p1),
    .dout(mul_ln74_1_fu_218_p2)
);

DelayAndSum_mul_16s_16s_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 31 ))
mul_16s_16s_31_1_1_U2(
    .din0(mul_ln80_fu_224_p0),
    .din1(mul_ln80_fu_224_p1),
    .dout(mul_ln80_fu_224_p2)
);

DelayAndSum_mac_muladd_16s_16s_31s_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31s_31_4_1_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_286_p0),
    .din1(grp_fu_286_p1),
    .din2(mul_ln74_1_reg_468_pp0_iter1_reg),
    .ce(grp_fu_286_ce),
    .dout(grp_fu_286_p3)
);

DelayAndSum_mac_mulsub_16s_16s_31s_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_mulsub_16s_16s_31s_31_4_1_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_293_p0),
    .din1(grp_fu_293_p1),
    .din2(mul_ln80_reg_473_pp0_iter1_reg),
    .ce(grp_fu_293_ce),
    .dout(grp_fu_293_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_300_p0),
    .din1(in2_real_buffer_reg_392),
    .din2(grp_fu_286_p3),
    .ce(grp_fu_300_ce),
    .dout(grp_fu_300_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_308_p0),
    .din1(in2_imag_buffer_reg_397),
    .din2(grp_fu_293_p3),
    .ce(grp_fu_308_ce),
    .dout(grp_fu_308_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_316_p0),
    .din1(grp_fu_316_p1),
    .din2(grp_fu_300_p3),
    .ce(grp_fu_316_ce),
    .dout(grp_fu_316_p3)
);

DelayAndSum_mac_mulsub_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_mulsub_16s_16s_31ns_31_4_1_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_323_p0),
    .din1(grp_fu_323_p1),
    .din2(grp_fu_308_p3),
    .ce(grp_fu_323_ce),
    .dout(grp_fu_323_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U9(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_330_p0),
    .din1(in3_real_buffer_reg_402_pp0_iter2_reg),
    .din2(grp_fu_316_p3),
    .ce(grp_fu_330_ce),
    .dout(grp_fu_330_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U10(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_338_p0),
    .din1(in3_imag_buffer_reg_407_pp0_iter2_reg),
    .din2(grp_fu_323_p3),
    .ce(grp_fu_338_ce),
    .dout(grp_fu_338_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U11(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_346_p0),
    .din1(grp_fu_346_p1),
    .din2(grp_fu_330_p3),
    .ce(grp_fu_346_ce),
    .dout(grp_fu_346_p3)
);

DelayAndSum_mac_mulsub_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_mulsub_16s_16s_31ns_31_4_1_U12(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_353_p0),
    .din1(grp_fu_353_p1),
    .din2(grp_fu_338_p3),
    .ce(grp_fu_353_ce),
    .dout(grp_fu_353_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U13(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_360_p0),
    .din1(in4_real_buffer_reg_412_pp0_iter4_reg),
    .din2(grp_fu_346_p3),
    .ce(grp_fu_360_ce),
    .dout(grp_fu_360_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U14(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_368_p0),
    .din1(in4_imag_buffer_reg_417_pp0_iter4_reg),
    .din2(grp_fu_353_p3),
    .ce(grp_fu_368_ce),
    .dout(grp_fu_368_p3)
);

DelayAndSum_mac_muladd_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_muladd_16s_16s_31ns_31_4_1_U15(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_376_p0),
    .din1(grp_fu_376_p1),
    .din2(grp_fu_360_p3),
    .ce(grp_fu_376_ce),
    .dout(grp_fu_376_p3)
);

DelayAndSum_mac_mulsub_16s_16s_31ns_31_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 31 ),
    .dout_WIDTH( 31 ))
mac_mulsub_16s_16s_31ns_31_4_1_U16(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_384_p0),
    .din1(grp_fu_384_p1),
    .din2(grp_fu_368_p3),
    .ce(grp_fu_384_ce),
    .dout(grp_fu_384_p3)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in1_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_real_TDATA),
    .vld_in(in1_real_TVALID),
    .ack_in(regslice_both_in1_real_U_ack_in),
    .data_out(in1_real_TDATA_int_regslice),
    .vld_out(in1_real_TVALID_int_regslice),
    .ack_out(in1_real_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in1_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_imag_TDATA),
    .vld_in(in1_imag_TVALID),
    .ack_in(regslice_both_in1_imag_U_ack_in),
    .data_out(in1_imag_TDATA_int_regslice),
    .vld_out(in1_imag_TVALID_int_regslice),
    .ack_out(in1_imag_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_imag_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in2_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_real_TDATA),
    .vld_in(in2_real_TVALID),
    .ack_in(regslice_both_in2_real_U_ack_in),
    .data_out(in2_real_TDATA_int_regslice),
    .vld_out(in2_real_TVALID_int_regslice),
    .ack_out(in2_real_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in2_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_imag_TDATA),
    .vld_in(in2_imag_TVALID),
    .ack_in(regslice_both_in2_imag_U_ack_in),
    .data_out(in2_imag_TDATA_int_regslice),
    .vld_out(in2_imag_TVALID_int_regslice),
    .ack_out(in2_imag_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_imag_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in3_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in3_real_TDATA),
    .vld_in(in3_real_TVALID),
    .ack_in(regslice_both_in3_real_U_ack_in),
    .data_out(in3_real_TDATA_int_regslice),
    .vld_out(in3_real_TVALID_int_regslice),
    .ack_out(in3_real_TREADY_int_regslice),
    .apdone_blk(regslice_both_in3_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in3_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in3_imag_TDATA),
    .vld_in(in3_imag_TVALID),
    .ack_in(regslice_both_in3_imag_U_ack_in),
    .data_out(in3_imag_TDATA_int_regslice),
    .vld_out(in3_imag_TVALID_int_regslice),
    .ack_out(in3_imag_TREADY_int_regslice),
    .apdone_blk(regslice_both_in3_imag_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in4_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in4_real_TDATA),
    .vld_in(in4_real_TVALID),
    .ack_in(regslice_both_in4_real_U_ack_in),
    .data_out(in4_real_TDATA_int_regslice),
    .vld_out(in4_real_TVALID_int_regslice),
    .ack_out(in4_real_TREADY_int_regslice),
    .apdone_blk(regslice_both_in4_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in4_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in4_imag_TDATA),
    .vld_in(in4_imag_TVALID),
    .ack_in(regslice_both_in4_imag_U_ack_in),
    .data_out(in4_imag_TDATA_int_regslice),
    .vld_out(in4_imag_TVALID_int_regslice),
    .ack_out(in4_imag_TREADY_int_regslice),
    .apdone_blk(regslice_both_in4_imag_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_real_TDATA_int_regslice),
    .vld_in(out_real_TVALID_int_regslice),
    .ack_in(out_real_TREADY_int_regslice),
    .data_out(out_real_TDATA),
    .vld_out(regslice_both_out_real_U_vld_out),
    .ack_out(out_real_TREADY),
    .apdone_blk(regslice_both_out_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_imag_TDATA_int_regslice),
    .vld_in(out_imag_TVALID_int_regslice),
    .ack_in(out_imag_TREADY_int_regslice),
    .data_out(out_imag_TDATA),
    .vld_out(regslice_both_out_imag_U_vld_out),
    .ack_out(out_imag_TREADY),
    .apdone_blk(regslice_both_out_imag_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in2_imag_buffer_reg_397 <= in2_imag_TDATA_int_regslice;
        in2_real_buffer_reg_392 <= in2_real_TDATA_int_regslice;
        in3_imag_buffer_reg_407 <= in3_imag_TDATA_int_regslice;
        in3_imag_buffer_reg_407_pp0_iter1_reg <= in3_imag_buffer_reg_407;
        in3_real_buffer_reg_402 <= in3_real_TDATA_int_regslice;
        in3_real_buffer_reg_402_pp0_iter1_reg <= in3_real_buffer_reg_402;
        in4_imag_buffer_reg_417 <= in4_imag_TDATA_int_regslice;
        in4_imag_buffer_reg_417_pp0_iter1_reg <= in4_imag_buffer_reg_417;
        in4_real_buffer_reg_412 <= in4_real_TDATA_int_regslice;
        in4_real_buffer_reg_412_pp0_iter1_reg <= in4_real_buffer_reg_412;
        mul_ln74_1_reg_468 <= mul_ln74_1_fu_218_p2;
        mul_ln74_1_reg_468_pp0_iter1_reg <= mul_ln74_1_reg_468;
        mul_ln80_reg_473 <= mul_ln80_fu_224_p2;
        mul_ln80_reg_473_pp0_iter1_reg <= mul_ln80_reg_473;
        sext_ln75_1_reg_484 <= sext_ln75_1_fu_233_p1;
        sext_ln75_3_reg_490 <= sext_ln75_3_fu_236_p1;
        w2_imag_buffer_reg_427 <= w2_imag;
        w2_imag_buffer_reg_427_pp0_iter1_reg <= w2_imag_buffer_reg_427;
        w2_real_buffer_reg_422 <= w2_real;
        w3_imag_buffer_reg_437 <= w3_imag;
        w3_imag_buffer_reg_437_pp0_iter1_reg <= w3_imag_buffer_reg_437;
        w3_real_buffer_reg_432 <= w3_real;
        w3_real_buffer_reg_432_pp0_iter1_reg <= w3_real_buffer_reg_432;
        w4_imag_buffer_reg_447 <= w4_imag;
        w4_imag_buffer_reg_447_pp0_iter1_reg <= w4_imag_buffer_reg_447;
        w4_real_buffer_reg_442 <= w4_real;
        w4_real_buffer_reg_442_pp0_iter1_reg <= w4_real_buffer_reg_442;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        in3_imag_buffer_reg_407_pp0_iter2_reg <= in3_imag_buffer_reg_407_pp0_iter1_reg;
        in3_real_buffer_reg_402_pp0_iter2_reg <= in3_real_buffer_reg_402_pp0_iter1_reg;
        in4_imag_buffer_reg_417_pp0_iter2_reg <= in4_imag_buffer_reg_417_pp0_iter1_reg;
        in4_imag_buffer_reg_417_pp0_iter3_reg <= in4_imag_buffer_reg_417_pp0_iter2_reg;
        in4_imag_buffer_reg_417_pp0_iter4_reg <= in4_imag_buffer_reg_417_pp0_iter3_reg;
        in4_real_buffer_reg_412_pp0_iter2_reg <= in4_real_buffer_reg_412_pp0_iter1_reg;
        in4_real_buffer_reg_412_pp0_iter3_reg <= in4_real_buffer_reg_412_pp0_iter2_reg;
        in4_real_buffer_reg_412_pp0_iter4_reg <= in4_real_buffer_reg_412_pp0_iter3_reg;
        sext_ln76_1_reg_513 <= sext_ln76_1_fu_245_p1;
        sext_ln76_3_reg_519 <= sext_ln76_3_fu_248_p1;
        sext_ln77_1_reg_557 <= sext_ln77_1_fu_257_p1;
        sext_ln77_3_reg_563 <= sext_ln77_3_fu_260_p1;
        w3_imag_buffer_reg_437_pp0_iter2_reg <= w3_imag_buffer_reg_437_pp0_iter1_reg;
        w3_imag_buffer_reg_437_pp0_iter3_reg <= w3_imag_buffer_reg_437_pp0_iter2_reg;
        w3_real_buffer_reg_432_pp0_iter2_reg <= w3_real_buffer_reg_432_pp0_iter1_reg;
        w4_imag_buffer_reg_447_pp0_iter2_reg <= w4_imag_buffer_reg_447_pp0_iter1_reg;
        w4_imag_buffer_reg_447_pp0_iter3_reg <= w4_imag_buffer_reg_447_pp0_iter2_reg;
        w4_imag_buffer_reg_447_pp0_iter4_reg <= w4_imag_buffer_reg_447_pp0_iter3_reg;
        w4_imag_buffer_reg_447_pp0_iter5_reg <= w4_imag_buffer_reg_447_pp0_iter4_reg;
        w4_real_buffer_reg_442_pp0_iter2_reg <= w4_real_buffer_reg_442_pp0_iter1_reg;
        w4_real_buffer_reg_442_pp0_iter3_reg <= w4_real_buffer_reg_442_pp0_iter2_reg;
        w4_real_buffer_reg_442_pp0_iter4_reg <= w4_real_buffer_reg_442_pp0_iter3_reg;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to9 = 1'b1;
    end else begin
        ap_idle_pp0_0to9 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to9 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_286_ce = 1'b1;
    end else begin
        grp_fu_286_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_293_ce = 1'b1;
    end else begin
        grp_fu_293_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_300_ce = 1'b1;
    end else begin
        grp_fu_300_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_308_ce = 1'b1;
    end else begin
        grp_fu_308_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_316_ce = 1'b1;
    end else begin
        grp_fu_316_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_323_ce = 1'b1;
    end else begin
        grp_fu_323_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_330_ce = 1'b1;
    end else begin
        grp_fu_330_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_338_ce = 1'b1;
    end else begin
        grp_fu_338_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_346_ce = 1'b1;
    end else begin
        grp_fu_346_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_353_ce = 1'b1;
    end else begin
        grp_fu_353_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_360_ce = 1'b1;
    end else begin
        grp_fu_360_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_368_ce = 1'b1;
    end else begin
        grp_fu_368_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_376_ce = 1'b1;
    end else begin
        grp_fu_376_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_384_ce = 1'b1;
    end else begin
        grp_fu_384_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_imag_TDATA_blk_n = in1_imag_TVALID_int_regslice;
    end else begin
        in1_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in1_imag_TREADY_int_regslice = 1'b1;
    end else begin
        in1_imag_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in1_real_TDATA_blk_n = in1_real_TVALID_int_regslice;
    end else begin
        in1_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in1_real_TREADY_int_regslice = 1'b1;
    end else begin
        in1_real_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_imag_TDATA_blk_n = in2_imag_TVALID_int_regslice;
    end else begin
        in2_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in2_imag_TREADY_int_regslice = 1'b1;
    end else begin
        in2_imag_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in2_real_TDATA_blk_n = in2_real_TVALID_int_regslice;
    end else begin
        in2_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in2_real_TREADY_int_regslice = 1'b1;
    end else begin
        in2_real_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in3_imag_TDATA_blk_n = in3_imag_TVALID_int_regslice;
    end else begin
        in3_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in3_imag_TREADY_int_regslice = 1'b1;
    end else begin
        in3_imag_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in3_real_TDATA_blk_n = in3_real_TVALID_int_regslice;
    end else begin
        in3_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in3_real_TREADY_int_regslice = 1'b1;
    end else begin
        in3_real_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in4_imag_TDATA_blk_n = in4_imag_TVALID_int_regslice;
    end else begin
        in4_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in4_imag_TREADY_int_regslice = 1'b1;
    end else begin
        in4_imag_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        in4_real_TDATA_blk_n = in4_real_TVALID_int_regslice;
    end else begin
        in4_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        in4_real_TREADY_int_regslice = 1'b1;
    end else begin
        in4_real_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_imag_TDATA_blk_n = out_imag_TREADY_int_regslice;
    end else begin
        out_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_imag_TVALID_int_regslice = 1'b1;
    end else begin
        out_imag_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        out_real_TDATA_blk_n = out_real_TREADY_int_regslice;
    end else begin
        out_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        out_real_TVALID_int_regslice = 1'b1;
    end else begin
        out_real_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b1 == ap_block_state10_pp0_stage0_iter9)) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & (1'b1 == ap_block_state11_pp0_stage0_iter10)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter9 == 1'b1) & ((1'b1 == ap_block_state10_io) | (1'b1 == ap_block_state10_pp0_stage0_iter9))) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & ((1'b1 == ap_block_state11_io) | (1'b1 == ap_block_state11_pp0_stage0_iter10))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter9 == 1'b1) & ((1'b1 == ap_block_state10_io) | (1'b1 == ap_block_state10_pp0_stage0_iter9))) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter10 == 1'b1) & ((1'b1 == ap_block_state11_io) | (1'b1 == ap_block_state11_pp0_stage0_iter10))));
end

always @ (*) begin
    ap_block_state10_io = ((out_imag_TREADY_int_regslice == 1'b0) | (out_real_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state10_pp0_stage0_iter9 = ((out_imag_TREADY_int_regslice == 1'b0) | (out_real_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state11_io = ((out_imag_TREADY_int_regslice == 1'b0) | (out_real_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage0_iter10 = ((regslice_both_out_real_U_apdone_blk == 1'b1) | (out_imag_TREADY_int_regslice == 1'b0) | (out_real_TREADY_int_regslice == 1'b0) | (regslice_both_out_imag_U_apdone_blk == 1'b1));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((in4_imag_TVALID_int_regslice == 1'b0) | (in4_real_TVALID_int_regslice == 1'b0) | (in3_imag_TVALID_int_regslice == 1'b0) | (in3_real_TVALID_int_regslice == 1'b0) | (in2_imag_TVALID_int_regslice == 1'b0) | (in2_real_TVALID_int_regslice == 1'b0) | (in1_imag_TVALID_int_regslice == 1'b0) | (in1_real_TVALID_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_286_p0 = sext_ln74_fu_202_p1;

assign grp_fu_286_p1 = sext_ln74_1_fu_206_p1;

assign grp_fu_293_p0 = sext_ln74_2_fu_210_p1;

assign grp_fu_293_p1 = sext_ln74_1_fu_206_p1;

assign grp_fu_300_p0 = sext_ln75_fu_230_p1;

assign grp_fu_308_p0 = sext_ln75_fu_230_p1;

assign grp_fu_316_p0 = sext_ln75_2_fu_239_p1;

assign grp_fu_316_p1 = sext_ln75_3_reg_490;

assign grp_fu_323_p0 = sext_ln75_2_fu_239_p1;

assign grp_fu_323_p1 = sext_ln75_1_reg_484;

assign grp_fu_330_p0 = sext_ln76_fu_242_p1;

assign grp_fu_338_p0 = sext_ln76_fu_242_p1;

assign grp_fu_346_p0 = sext_ln76_2_fu_251_p1;

assign grp_fu_346_p1 = sext_ln76_3_reg_519;

assign grp_fu_353_p0 = sext_ln76_2_fu_251_p1;

assign grp_fu_353_p1 = sext_ln76_1_reg_513;

assign grp_fu_360_p0 = sext_ln77_fu_254_p1;

assign grp_fu_368_p0 = sext_ln77_fu_254_p1;

assign grp_fu_376_p0 = sext_ln77_2_fu_263_p1;

assign grp_fu_376_p1 = sext_ln77_3_reg_563;

assign grp_fu_384_p0 = sext_ln77_2_fu_263_p1;

assign grp_fu_384_p1 = sext_ln77_1_reg_557;

assign in1_imag_TREADY = regslice_both_in1_imag_U_ack_in;

assign in1_real_TREADY = regslice_both_in1_real_U_ack_in;

assign in2_imag_TREADY = regslice_both_in2_imag_U_ack_in;

assign in2_real_TREADY = regslice_both_in2_real_U_ack_in;

assign in3_imag_TREADY = regslice_both_in3_imag_U_ack_in;

assign in3_real_TREADY = regslice_both_in3_real_U_ack_in;

assign in4_imag_TREADY = regslice_both_in4_imag_U_ack_in;

assign in4_real_TREADY = regslice_both_in4_real_U_ack_in;

assign mul_ln74_1_fu_218_p0 = sext_ln74_2_fu_210_p1;

assign mul_ln74_1_fu_218_p1 = sext_ln74_3_fu_214_p1;

assign mul_ln80_fu_224_p0 = sext_ln74_fu_202_p1;

assign mul_ln80_fu_224_p1 = sext_ln74_3_fu_214_p1;

assign out_imag_TDATA_int_regslice = {{p_0_fu_276_p1[30:15]}};

assign out_imag_TVALID = regslice_both_out_imag_U_vld_out;

assign out_real_TDATA_int_regslice = {{p_s_fu_266_p1[30:15]}};

assign out_real_TVALID = regslice_both_out_real_U_vld_out;

assign p_0_fu_276_p1 = grp_fu_384_p3;

assign p_s_fu_266_p1 = grp_fu_376_p3;

assign sext_ln74_1_fu_206_p1 = $signed(in1_real_TDATA_int_regslice);

assign sext_ln74_2_fu_210_p1 = $signed(w1_imag);

assign sext_ln74_3_fu_214_p1 = $signed(in1_imag_TDATA_int_regslice);

assign sext_ln74_fu_202_p1 = $signed(w1_real);

assign sext_ln75_1_fu_233_p1 = in2_real_buffer_reg_392;

assign sext_ln75_2_fu_239_p1 = $signed(w2_imag_buffer_reg_427_pp0_iter1_reg);

assign sext_ln75_3_fu_236_p1 = in2_imag_buffer_reg_397;

assign sext_ln75_fu_230_p1 = $signed(w2_real_buffer_reg_422);

assign sext_ln76_1_fu_245_p1 = in3_real_buffer_reg_402_pp0_iter2_reg;

assign sext_ln76_2_fu_251_p1 = $signed(w3_imag_buffer_reg_437_pp0_iter3_reg);

assign sext_ln76_3_fu_248_p1 = in3_imag_buffer_reg_407_pp0_iter2_reg;

assign sext_ln76_fu_242_p1 = $signed(w3_real_buffer_reg_432_pp0_iter2_reg);

assign sext_ln77_1_fu_257_p1 = in4_real_buffer_reg_412_pp0_iter4_reg;

assign sext_ln77_2_fu_263_p1 = $signed(w4_imag_buffer_reg_447_pp0_iter5_reg);

assign sext_ln77_3_fu_260_p1 = in4_imag_buffer_reg_417_pp0_iter4_reg;

assign sext_ln77_fu_254_p1 = $signed(w4_real_buffer_reg_442_pp0_iter4_reg);

endmodule //DelayAndSum
