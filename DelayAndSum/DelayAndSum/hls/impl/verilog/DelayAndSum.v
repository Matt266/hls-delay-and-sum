// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="DelayAndSum_DelayAndSum,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu48dr-ffvg1517-2-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.254000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=176,HLS_SYN_LUT=532,HLS_VERSION=2024_1}" *)

module DelayAndSum (
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in1_real_TVALID,
        in1_imag_TVALID,
        in2_real_TVALID,
        in2_imag_TVALID,
        in3_real_TVALID,
        in3_imag_TVALID,
        in4_real_TVALID,
        in4_imag_TVALID,
        out_real_TREADY,
        out_imag_TREADY,
        in1_real_TDATA,
        in1_real_TREADY,
        in1_imag_TDATA,
        in1_imag_TREADY,
        in2_real_TDATA,
        in2_real_TREADY,
        in2_imag_TDATA,
        in2_imag_TREADY,
        in3_real_TDATA,
        in3_real_TREADY,
        in3_imag_TDATA,
        in3_imag_TREADY,
        in4_real_TDATA,
        in4_real_TREADY,
        in4_imag_TDATA,
        in4_imag_TREADY,
        out_real_TDATA,
        out_real_TVALID,
        out_imag_TDATA,
        out_imag_TVALID,
        s_axi_control_AWVALID,
        s_axi_control_AWREADY,
        s_axi_control_AWADDR,
        s_axi_control_WVALID,
        s_axi_control_WREADY,
        s_axi_control_WDATA,
        s_axi_control_WSTRB,
        s_axi_control_ARVALID,
        s_axi_control_ARREADY,
        s_axi_control_ARADDR,
        s_axi_control_RVALID,
        s_axi_control_RREADY,
        s_axi_control_RDATA,
        s_axi_control_RRESP,
        s_axi_control_BVALID,
        s_axi_control_BREADY,
        s_axi_control_BRESP
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;
parameter    C_S_AXI_CONTROL_DATA_WIDTH = 32;
parameter    C_S_AXI_CONTROL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CONTROL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in1_real_TVALID;
input   in1_imag_TVALID;
input   in2_real_TVALID;
input   in2_imag_TVALID;
input   in3_real_TVALID;
input   in3_imag_TVALID;
input   in4_real_TVALID;
input   in4_imag_TVALID;
input   out_real_TREADY;
input   out_imag_TREADY;
input  [15:0] in1_real_TDATA;
output   in1_real_TREADY;
input  [15:0] in1_imag_TDATA;
output   in1_imag_TREADY;
input  [15:0] in2_real_TDATA;
output   in2_real_TREADY;
input  [15:0] in2_imag_TDATA;
output   in2_imag_TREADY;
input  [15:0] in3_real_TDATA;
output   in3_real_TREADY;
input  [15:0] in3_imag_TDATA;
output   in3_imag_TREADY;
input  [15:0] in4_real_TDATA;
output   in4_real_TREADY;
input  [15:0] in4_imag_TDATA;
output   in4_imag_TREADY;
output  [15:0] out_real_TDATA;
output   out_real_TVALID;
output  [15:0] out_imag_TDATA;
output   out_imag_TVALID;
input   s_axi_control_AWVALID;
output   s_axi_control_AWREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_AWADDR;
input   s_axi_control_WVALID;
output   s_axi_control_WREADY;
input  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_WDATA;
input  [C_S_AXI_CONTROL_WSTRB_WIDTH - 1:0] s_axi_control_WSTRB;
input   s_axi_control_ARVALID;
output   s_axi_control_ARREADY;
input  [C_S_AXI_CONTROL_ADDR_WIDTH - 1:0] s_axi_control_ARADDR;
output   s_axi_control_RVALID;
input   s_axi_control_RREADY;
output  [C_S_AXI_CONTROL_DATA_WIDTH - 1:0] s_axi_control_RDATA;
output  [1:0] s_axi_control_RRESP;
output   s_axi_control_BVALID;
input   s_axi_control_BREADY;
output  [1:0] s_axi_control_BRESP;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state1_io;
wire    regslice_both_out_real_U_apdone_blk;
wire    regslice_both_out_imag_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state2_io;
reg    ap_block_pp0_stage0_subdone;
wire   [11:0] phi;
wire   [31:0] fc;
wire   [15:0] xpos1;
wire   [15:0] xpos2;
wire   [15:0] xpos3;
wire   [15:0] xpos4;
reg    in1_real_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    in1_imag_TDATA_blk_n;
reg    in2_real_TDATA_blk_n;
reg    in2_imag_TDATA_blk_n;
reg    in3_real_TDATA_blk_n;
reg    in3_imag_TDATA_blk_n;
reg    in4_real_TDATA_blk_n;
reg    in4_imag_TDATA_blk_n;
reg    out_real_TDATA_blk_n;
reg    out_imag_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_01001;
wire  signed [16:0] in1_real_buffer_cast_fu_150_p1;
wire  signed [16:0] sext_ln91_fu_158_p1;
wire   [16:0] add_ln91_fu_162_p2;
wire  signed [17:0] sext_ln91_1_fu_168_p1;
wire  signed [17:0] in2_real_buffer_cast_fu_154_p1;
wire   [17:0] add_ln91_1_fu_172_p2;
wire   [28:0] shl_ln1_fu_186_p3;
wire  signed [30:0] sext_ln92_fu_194_p1;
wire   [30:0] shl_ln_fu_178_p3;
wire   [30:0] add_ln92_fu_198_p2;
wire  signed [16:0] in1_imag_buffer_cast_fu_215_p1;
wire  signed [16:0] sext_ln96_fu_223_p1;
wire   [16:0] add_ln96_fu_227_p2;
wire  signed [17:0] sext_ln96_1_fu_233_p1;
wire  signed [17:0] in2_imag_buffer_cast_fu_219_p1;
wire   [17:0] add_ln96_1_fu_237_p2;
wire   [28:0] shl_ln3_fu_251_p3;
wire  signed [30:0] sext_ln97_fu_259_p1;
wire   [30:0] shl_ln2_fu_243_p3;
wire   [30:0] add_ln97_fu_263_p2;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_in1_real_U_apdone_blk;
wire   [15:0] in1_real_TDATA_int_regslice;
wire    in1_real_TVALID_int_regslice;
reg    in1_real_TREADY_int_regslice;
wire    regslice_both_in1_real_U_ack_in;
wire    regslice_both_in1_imag_U_apdone_blk;
wire   [15:0] in1_imag_TDATA_int_regslice;
wire    in1_imag_TVALID_int_regslice;
reg    in1_imag_TREADY_int_regslice;
wire    regslice_both_in1_imag_U_ack_in;
wire    regslice_both_in2_real_U_apdone_blk;
wire   [15:0] in2_real_TDATA_int_regslice;
wire    in2_real_TVALID_int_regslice;
reg    in2_real_TREADY_int_regslice;
wire    regslice_both_in2_real_U_ack_in;
wire    regslice_both_in2_imag_U_apdone_blk;
wire   [15:0] in2_imag_TDATA_int_regslice;
wire    in2_imag_TVALID_int_regslice;
reg    in2_imag_TREADY_int_regslice;
wire    regslice_both_in2_imag_U_ack_in;
wire    regslice_both_in3_real_U_apdone_blk;
wire   [15:0] in3_real_TDATA_int_regslice;
wire    in3_real_TVALID_int_regslice;
reg    in3_real_TREADY_int_regslice;
wire    regslice_both_in3_real_U_ack_in;
wire    regslice_both_in3_imag_U_apdone_blk;
wire   [15:0] in3_imag_TDATA_int_regslice;
wire    in3_imag_TVALID_int_regslice;
reg    in3_imag_TREADY_int_regslice;
wire    regslice_both_in3_imag_U_ack_in;
wire    regslice_both_in4_real_U_apdone_blk;
wire   [15:0] in4_real_TDATA_int_regslice;
wire    in4_real_TVALID_int_regslice;
reg    in4_real_TREADY_int_regslice;
wire    regslice_both_in4_real_U_ack_in;
wire    regslice_both_in4_imag_U_apdone_blk;
wire   [15:0] in4_imag_TDATA_int_regslice;
wire    in4_imag_TVALID_int_regslice;
reg    in4_imag_TREADY_int_regslice;
wire    regslice_both_in4_imag_U_ack_in;
wire   [15:0] out_real_TDATA_int_regslice;
reg    out_real_TVALID_int_regslice;
wire    out_real_TREADY_int_regslice;
wire    regslice_both_out_real_U_vld_out;
wire   [15:0] out_imag_TDATA_int_regslice;
reg    out_imag_TVALID_int_regslice;
wire    out_imag_TREADY_int_regslice;
wire    regslice_both_out_imag_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

DelayAndSum_control_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CONTROL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CONTROL_DATA_WIDTH ))
control_s_axi_U(
    .AWVALID(s_axi_control_AWVALID),
    .AWREADY(s_axi_control_AWREADY),
    .AWADDR(s_axi_control_AWADDR),
    .WVALID(s_axi_control_WVALID),
    .WREADY(s_axi_control_WREADY),
    .WDATA(s_axi_control_WDATA),
    .WSTRB(s_axi_control_WSTRB),
    .ARVALID(s_axi_control_ARVALID),
    .ARREADY(s_axi_control_ARREADY),
    .ARADDR(s_axi_control_ARADDR),
    .RVALID(s_axi_control_RVALID),
    .RREADY(s_axi_control_RREADY),
    .RDATA(s_axi_control_RDATA),
    .RRESP(s_axi_control_RRESP),
    .BVALID(s_axi_control_BVALID),
    .BREADY(s_axi_control_BREADY),
    .BRESP(s_axi_control_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .phi(phi),
    .fc(fc),
    .xpos1(xpos1),
    .xpos2(xpos2),
    .xpos3(xpos3),
    .xpos4(xpos4)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in1_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_real_TDATA),
    .vld_in(in1_real_TVALID),
    .ack_in(regslice_both_in1_real_U_ack_in),
    .data_out(in1_real_TDATA_int_regslice),
    .vld_out(in1_real_TVALID_int_regslice),
    .ack_out(in1_real_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in1_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in1_imag_TDATA),
    .vld_in(in1_imag_TVALID),
    .ack_in(regslice_both_in1_imag_U_ack_in),
    .data_out(in1_imag_TDATA_int_regslice),
    .vld_out(in1_imag_TVALID_int_regslice),
    .ack_out(in1_imag_TREADY_int_regslice),
    .apdone_blk(regslice_both_in1_imag_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in2_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_real_TDATA),
    .vld_in(in2_real_TVALID),
    .ack_in(regslice_both_in2_real_U_ack_in),
    .data_out(in2_real_TDATA_int_regslice),
    .vld_out(in2_real_TVALID_int_regslice),
    .ack_out(in2_real_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in2_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in2_imag_TDATA),
    .vld_in(in2_imag_TVALID),
    .ack_in(regslice_both_in2_imag_U_ack_in),
    .data_out(in2_imag_TDATA_int_regslice),
    .vld_out(in2_imag_TVALID_int_regslice),
    .ack_out(in2_imag_TREADY_int_regslice),
    .apdone_blk(regslice_both_in2_imag_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in3_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in3_real_TDATA),
    .vld_in(in3_real_TVALID),
    .ack_in(regslice_both_in3_real_U_ack_in),
    .data_out(in3_real_TDATA_int_regslice),
    .vld_out(in3_real_TVALID_int_regslice),
    .ack_out(in3_real_TREADY_int_regslice),
    .apdone_blk(regslice_both_in3_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in3_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in3_imag_TDATA),
    .vld_in(in3_imag_TVALID),
    .ack_in(regslice_both_in3_imag_U_ack_in),
    .data_out(in3_imag_TDATA_int_regslice),
    .vld_out(in3_imag_TVALID_int_regslice),
    .ack_out(in3_imag_TREADY_int_regslice),
    .apdone_blk(regslice_both_in3_imag_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in4_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in4_real_TDATA),
    .vld_in(in4_real_TVALID),
    .ack_in(regslice_both_in4_real_U_ack_in),
    .data_out(in4_real_TDATA_int_regslice),
    .vld_out(in4_real_TVALID_int_regslice),
    .ack_out(in4_real_TREADY_int_regslice),
    .apdone_blk(regslice_both_in4_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_in4_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(in4_imag_TDATA),
    .vld_in(in4_imag_TVALID),
    .ack_in(regslice_both_in4_imag_U_ack_in),
    .data_out(in4_imag_TDATA_int_regslice),
    .vld_out(in4_imag_TVALID_int_regslice),
    .ack_out(in4_imag_TREADY_int_regslice),
    .apdone_blk(regslice_both_in4_imag_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_real_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_real_TDATA_int_regslice),
    .vld_in(out_real_TVALID_int_regslice),
    .ack_in(out_real_TREADY_int_regslice),
    .data_out(out_real_TDATA),
    .vld_out(regslice_both_out_real_U_vld_out),
    .ack_out(out_real_TREADY),
    .apdone_blk(regslice_both_out_real_U_apdone_blk)
);

DelayAndSum_regslice_both #(
    .DataWidth( 16 ))
regslice_both_out_imag_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(out_imag_TDATA_int_regslice),
    .vld_in(out_imag_TVALID_int_regslice),
    .ack_in(out_imag_TREADY_int_regslice),
    .data_out(out_imag_TDATA),
    .vld_out(regslice_both_out_imag_U_vld_out),
    .ack_out(out_imag_TREADY),
    .apdone_blk(regslice_both_out_imag_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_imag_TDATA_blk_n = in1_imag_TVALID_int_regslice;
    end else begin
        in1_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_imag_TREADY_int_regslice = 1'b1;
    end else begin
        in1_imag_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_real_TDATA_blk_n = in1_real_TVALID_int_regslice;
    end else begin
        in1_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in1_real_TREADY_int_regslice = 1'b1;
    end else begin
        in1_real_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_imag_TDATA_blk_n = in2_imag_TVALID_int_regslice;
    end else begin
        in2_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_imag_TREADY_int_regslice = 1'b1;
    end else begin
        in2_imag_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_real_TDATA_blk_n = in2_real_TVALID_int_regslice;
    end else begin
        in2_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in2_real_TREADY_int_regslice = 1'b1;
    end else begin
        in2_real_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in3_imag_TDATA_blk_n = in3_imag_TVALID_int_regslice;
    end else begin
        in3_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in3_imag_TREADY_int_regslice = 1'b1;
    end else begin
        in3_imag_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in3_real_TDATA_blk_n = in3_real_TVALID_int_regslice;
    end else begin
        in3_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in3_real_TREADY_int_regslice = 1'b1;
    end else begin
        in3_real_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in4_imag_TDATA_blk_n = in4_imag_TVALID_int_regslice;
    end else begin
        in4_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in4_imag_TREADY_int_regslice = 1'b1;
    end else begin
        in4_imag_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in4_real_TDATA_blk_n = in4_real_TVALID_int_regslice;
    end else begin
        in4_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in4_real_TREADY_int_regslice = 1'b1;
    end else begin
        in4_real_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_imag_TDATA_blk_n = out_imag_TREADY_int_regslice;
    end else begin
        out_imag_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_imag_TVALID_int_regslice = 1'b1;
    end else begin
        out_imag_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        out_real_TDATA_blk_n = out_real_TREADY_int_regslice;
    end else begin
        out_real_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_real_TVALID_int_regslice = 1'b1;
    end else begin
        out_real_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln91_1_fu_172_p2 = ($signed(sext_ln91_1_fu_168_p1) + $signed(in2_real_buffer_cast_fu_154_p1));

assign add_ln91_fu_162_p2 = ($signed(in1_real_buffer_cast_fu_150_p1) + $signed(sext_ln91_fu_158_p1));

assign add_ln92_fu_198_p2 = ($signed(sext_ln92_fu_194_p1) + $signed(shl_ln_fu_178_p3));

assign add_ln96_1_fu_237_p2 = ($signed(sext_ln96_1_fu_233_p1) + $signed(in2_imag_buffer_cast_fu_219_p1));

assign add_ln96_fu_227_p2 = ($signed(in1_imag_buffer_cast_fu_215_p1) + $signed(sext_ln96_fu_223_p1));

assign add_ln97_fu_263_p2 = ($signed(sext_ln97_fu_259_p1) + $signed(shl_ln2_fu_243_p3));

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1)) | ((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1))) | ((ap_start == 1'b1) & ((1'b1 == ap_block_state1_io) | (1'b1 == ap_block_state1_pp0_stage0_iter0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state2_io) | (1'b1 == ap_block_state2_pp0_stage0_iter1))) | ((ap_start == 1'b1) & ((1'b1 == ap_block_state1_io) | (1'b1 == ap_block_state1_pp0_stage0_iter0))));
end

always @ (*) begin
    ap_block_state1_io = ((out_imag_TREADY_int_regslice == 1'b0) | (out_real_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((out_imag_TREADY_int_regslice == 1'b0) | (out_real_TREADY_int_regslice == 1'b0) | (in4_imag_TVALID_int_regslice == 1'b0) | (in4_real_TVALID_int_regslice == 1'b0) | (in3_imag_TVALID_int_regslice == 1'b0) | (in3_real_TVALID_int_regslice == 1'b0) | (in2_imag_TVALID_int_regslice == 1'b0) | (in2_real_TVALID_int_regslice == 1'b0) | (in1_imag_TVALID_int_regslice == 1'b0) | (in1_real_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((out_imag_TREADY_int_regslice == 1'b0) | (out_real_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_out_imag_U_apdone_blk == 1'b1) | (regslice_both_out_real_U_apdone_blk == 1'b1) | (out_imag_TREADY_int_regslice == 1'b0) | (out_real_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign in1_imag_TREADY = regslice_both_in1_imag_U_ack_in;

assign in1_imag_buffer_cast_fu_215_p1 = $signed(in1_imag_TDATA_int_regslice);

assign in1_real_TREADY = regslice_both_in1_real_U_ack_in;

assign in1_real_buffer_cast_fu_150_p1 = $signed(in1_real_TDATA_int_regslice);

assign in2_imag_TREADY = regslice_both_in2_imag_U_ack_in;

assign in2_imag_buffer_cast_fu_219_p1 = $signed(in2_imag_TDATA_int_regslice);

assign in2_real_TREADY = regslice_both_in2_real_U_ack_in;

assign in2_real_buffer_cast_fu_154_p1 = $signed(in2_real_TDATA_int_regslice);

assign in3_imag_TREADY = regslice_both_in3_imag_U_ack_in;

assign in3_real_TREADY = regslice_both_in3_real_U_ack_in;

assign in4_imag_TREADY = regslice_both_in4_imag_U_ack_in;

assign in4_real_TREADY = regslice_both_in4_real_U_ack_in;

assign out_imag_TDATA_int_regslice = {{add_ln97_fu_263_p2[30:15]}};

assign out_imag_TVALID = regslice_both_out_imag_U_vld_out;

assign out_real_TDATA_int_regslice = {{add_ln92_fu_198_p2[30:15]}};

assign out_real_TVALID = regslice_both_out_real_U_vld_out;

assign sext_ln91_1_fu_168_p1 = $signed(add_ln91_fu_162_p2);

assign sext_ln91_fu_158_p1 = $signed(in3_real_TDATA_int_regslice);

assign sext_ln92_fu_194_p1 = $signed(shl_ln1_fu_186_p3);

assign sext_ln96_1_fu_233_p1 = $signed(add_ln96_fu_227_p2);

assign sext_ln96_fu_223_p1 = $signed(in3_imag_TDATA_int_regslice);

assign sext_ln97_fu_259_p1 = $signed(shl_ln3_fu_251_p3);

assign shl_ln1_fu_186_p3 = {{in4_real_TDATA_int_regslice}, {13'd0}};

assign shl_ln2_fu_243_p3 = {{add_ln96_1_fu_237_p2}, {13'd0}};

assign shl_ln3_fu_251_p3 = {{in4_imag_TDATA_int_regslice}, {13'd0}};

assign shl_ln_fu_178_p3 = {{add_ln91_1_fu_172_p2}, {13'd0}};

endmodule //DelayAndSum
